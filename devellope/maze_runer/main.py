import time
import sys
import os
import math

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import module
sys.path.append(os.path.join(os.path.dirname(__file__), 'controler'))

from controler.movement import (
    init_movement_system, 
    cleanup_movement_system,
    move_forward, 
    turn_right, 
    turn_left,
    get_current_position,
    get_current_orientation, 
    get_movement_stats,
    set_move_distance,
    # **import ‡∏£‡∏∞‡∏ö‡∏ö calibration**
    calibrate_initial_orientation,
    # **‡∏•‡∏ö convert_blocked_directions_to_compass**
)
from controler.map import Graph, a_star_search, Node, calculate_direction
from controler.check_wall import (
    move_gimbal,
    initialize_sensors,
    cleanup_sensors,
    detect_walls_with_gimbal,
    convert_gimbal_result_to_blocked_directions
)

class MazeRunner:
    def __init__(self):
        self.maze_map = Graph()
        self.current_node_id = None
        self.path_history = []
        self.move_distance = 0.5
        set_move_distance(self.move_distance)
        
        # **‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á**
        self.current_facing_direction = 'x+'  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å
        self.direction_history = []  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô

        print(f"üß≠ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏¥‡∏®: {self.current_facing_direction} (‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å)")

    def update_facing_direction(self, turn_direction, angle=90):
        """
        ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏∏‡∏ô - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏°‡∏∏‡∏°
        
        Args:
            turn_direction (str): 'right' ‡∏´‡∏£‡∏∑‡∏≠ 'left'
            angle (float): ‡∏°‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏∏‡∏ô (‡∏≠‡∏á‡∏®‡∏≤) - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö 90, 180, 270, 360
        """
        # ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤ - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ x+ (‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å)
        right_sequence = ['x+', 'y+', 'x-', 'y-']  # ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å ‚Üí ‡πÉ‡∏ï‡πâ ‚Üí ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å ‚Üí ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠
        
        current_index = right_sequence.index(self.current_facing_direction)
        
        # ‡πÅ‡∏¢‡∏Å‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏∏‡∏Å‡∏°‡∏∏‡∏°‡πÅ‡∏¢‡∏Å‡∏ä‡∏±‡∏î
        if turn_direction.lower() == 'right':
            if angle == 90:
                new_index = (current_index + 1) % 4
            elif angle == 180:
                new_index = (current_index + 2) % 4
            elif angle == 270:
                new_index = (current_index + 3) % 4
            elif angle == 360:
                new_index = current_index  # ‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡πÄ‡∏î‡∏¥‡∏°
            else:
                print(f"‚ùå ‡∏°‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {angle}¬∞")
                return
        elif turn_direction.lower() == 'left':
            if angle == 90:
                new_index = (current_index - 1) % 4
            elif angle == 180:
                new_index = (current_index - 2) % 4
            elif angle == 270:
                new_index = (current_index - 3) % 4
            elif angle == 360:
                new_index = current_index  # ‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡πÄ‡∏î‡∏¥‡∏°
            else:
                print(f"‚ùå ‡∏°‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {angle}¬∞")
                return
        else:
            print(f"‚ùå ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {turn_direction}")
            return
        
        old_direction = self.current_facing_direction
        self.current_facing_direction = right_sequence[new_index]
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
        self.direction_history.append({
            'action': f'turn_{turn_direction}',
            'angle': angle,
            'from': old_direction,
            'to': self.current_facing_direction,
            'node': self.current_node_id
        })
        
        direction_names = {
            'y+': '‡πÄ‡∏´‡∏ô‡∏∑‡∏≠', 'y-': '‡πÉ‡∏ï‡πâ', 'x+': '‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å', 'x-': '‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å'
        }
        
        print(f"‚úÖ ‡∏´‡∏°‡∏∏‡∏ô{turn_direction} {angle}¬∞: {direction_names[old_direction]} ‚Üí {direction_names[self.current_facing_direction]}")

    def verify_direction_from_movement(self, from_node_id, to_node_id):
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÇ‡∏´‡∏ô‡∏î
        """
        if from_node_id is None or to_node_id is None:
            return
        
        from_node = self.maze_map.nodes[from_node_id]
        to_node = self.maze_map.nodes[to_node_id]
        
        dx = to_node.x - from_node.x
        dy = to_node.y - from_node.y
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
        if abs(dx) > abs(dy):
            actual_direction = 'x+' if dx > 0 else 'x-'
        else:
            actual_direction = 'y+' if dy > 0 else 'y-'
        
        direction_names = {
            'y+': '‡πÄ‡∏´‡∏ô‡∏∑‡∏≠', 'y-': '‡πÉ‡∏ï‡πâ', 'x+': '‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å', 'x-': '‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å'
        }
        
        print(f"üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á:")
        print(f"   - ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: dx={dx:.3f}, dy={dy:.3f}")
        print(f"   - ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà: {actual_direction} ({direction_names[actual_direction]})")
        print(f"   - ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÑ‡∏ß‡πâ: {self.current_facing_direction} ({direction_names[self.current_facing_direction]})")
        
        if actual_direction == self.current_facing_direction:
            print("‚úÖ ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!")
        else:
            print("‚ö†Ô∏è ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô! ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç...")
            self.current_facing_direction = actual_direction
            print(f"üîÑ ‡∏õ‡∏£‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô: {actual_direction} ({direction_names[actual_direction]})")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        self.direction_history.append({
            'action': 'verify_movement',
            'from_node': from_node_id,
            'to_node': to_node_id,
            'expected': self.current_facing_direction,
            'actual': actual_direction,
            'correct': actual_direction == self.current_facing_direction
        })
    
    def get_real_position(self):
        """‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå"""
        return get_current_position()
        
    def add_node_here(self, is_exit=False, auto_detect_walls=True):
        """
        ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏ô‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ gimbal
        """
        x, y = self.get_real_position()
        print(f"üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå: x={x:.3f}, y={y:.3f}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ gimbal
        detected_walls = []
        if auto_detect_walls:
            print("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ gimbal...")
            # ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô detect_walls_with_gimbal
            from controler.movement import ep_robot
            detected_walls = detect_walls_with_gimbal(ep_robot, self.current_facing_direction)
            
        # ‡∏£‡∏ß‡∏°‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ manual
        all_blocked = []
        if detected_walls[1]:
            all_blocked.extend(detected_walls[1])  
            print(f"ü§ñ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ gimbal: {detected_walls[1]}")

        if all_blocked:
            print(f"üö´ ‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô‡∏£‡∏ß‡∏°: {all_blocked}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
        stats = get_movement_stats()
        print(f"üöÄ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß: {stats['speed']:.3f}m/s")
        
        display_x = round(x, 1)
        display_y = round(y, 1)
        
        node_id = self.maze_map.add_node(x=x, y=y, is_exit=is_exit, 
                                       blocked_directions=all_blocked)
        print(f"üìç ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏ô‡∏î {node_id} ‡∏ó‡∏µ‡πà ({display_x}, {display_y})")
        print(detected_walls)
        return node_id,detected_walls[0]

    def find_existing_node(self):
        """‡∏´‡∏≤‡πÇ‡∏´‡∏ô‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        x, y = self.get_real_position()
        
        print(f"üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: x={x:.3f}, y={y:.3f}")
        
        best_node = None
        min_diff = float('inf')
        tolerance = 0.3  # 30cm
        
        for node_id, node in self.maze_map.nodes.items():
            x_diff = abs(node.x - x)
            y_diff = abs(node.y - y)
            total_diff = x_diff + y_diff
            
            print(f"   ‡πÇ‡∏´‡∏ô‡∏î {node_id} ({node.x:.3f}, {node.y:.3f}): "
                  f"X:{x_diff:.3f} Y:{y_diff:.3f}", end="")
            
            if x_diff <= tolerance and y_diff <= tolerance and total_diff < min_diff:
                min_diff = total_diff
                best_node = node_id
                print(f" ‚Üê ‡πÄ‡∏à‡∏≠!")
            else:
                print("")
        
        return best_node
    

    
    def explore_maze(self):
        """‡∏™‡∏≥‡∏£‡∏ß‡∏à‡πÄ‡∏Ç‡∏≤‡∏ß‡∏á‡∏Å‡∏ï‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ - ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏ï‡πà‡∏≠"""
        print("üèÅ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏≥‡∏£‡∏ß‡∏à‡πÄ‡∏Ç‡∏≤‡∏ß‡∏á‡∏Å‡∏ï!")
        
        # ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô - ‡∏™‡πÅ‡∏Å‡∏ô‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏•‡∏¢
        start_node,wall = self.add_node_here(auto_detect_walls=True)
        self.path_history.append(start_node)
        self.current_node_id = start_node
        max_steps = 55
        print(wall,656565656565)

        current_node = self.maze_map.nodes[self.current_node_id]
        # current_node.blocked_directions.extend('x-')  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô x- (‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å) ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏ô‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        
        for step in range(1, max_steps + 1):
            print(f"\n--- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà {step} ---")
            
            # ‚úÖ 1. ‡πÄ‡∏ä‡πá‡∏Ñ‡πÇ‡∏´‡∏ô‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            current_node = self.maze_map.nodes[self.current_node_id]
            print(f"üìç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏´‡∏ô‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô {self.current_node_id}:")
            print(f"   - ‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô: {wall}")
            
            # ‚úÖ 2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• wall
            chosen_direction = ''
            if wall:
                if wall[0] == 1:
                    chosen_direction = 'left'
                elif wall[1] == 1:
                    chosen_direction = 'front'
                elif wall[2] == 1:
                    chosen_direction = 'right'
                elif wall[0] + wall[1] + wall[2] == 0:
                    chosen_direction = "back"
            
            # ‚úÖ 3. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏≤‡∏á‡πÑ‡∏õ ‡∏´‡∏£‡∏∑‡∏≠ back ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ A* ‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
            if chosen_direction == "back" or chosen_direction == '':
                print("üö´ ‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏≤‡∏á - ‡πÉ‡∏ä‡πâ A* ‡∏´‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà")
                
                # ‡∏´‡∏≤‡πÇ‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (neighbors + blocked_directions < 4)
                target_node_id = self.find_exploration_target()
                
                if target_node_id is None:
                    print("üéâ ‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß!")
                    break
                
                # ‡πÉ‡∏ä‡πâ A* ‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
                print(f"üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ‡πÇ‡∏´‡∏ô‡∏î {target_node_id}")
                path, distance = a_star_search(self.maze_map, self.current_node_id, target_node_id)
                
                if path is None:
                    print("‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ó‡∏≤‡∏á!")
                    break
                
                print(f"üó∫Ô∏è ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á A*: {' -> '.join(map(str, path))}")
                
                # ‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á A*
                self.navigate_to_target(path)
                
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                self.current_node_id = target_node_id
                
                # ‡∏™‡πÅ‡∏Å‡∏ô wall ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
                print("üîç ‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢...")
                from controler.movement import ep_robot
                wall_data = detect_walls_with_gimbal(ep_robot, self.current_facing_direction)
                wall = wall_data[0]
                
                continue
            
            # ‚úÖ 4. ‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏õ‡∏Å‡∏ï‡∏¥
            print(f"üéØ ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏±‡∏ô‡πÑ‡∏õ: {chosen_direction}")
            previous_node_id = self.current_node_id

            if chosen_direction == 'left':
                print("‚û°Ô∏è ‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏¥‡∏®‡∏ã‡πâ‡∏≤‡∏¢")
                turn_left(90)
                self.update_facing_direction('left', 90)
                time.sleep(0.1)
                move_forward(0.6)
            elif chosen_direction == 'right':
                print("‚û°Ô∏è ‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏¥‡∏®‡∏Ç‡∏ß‡∏≤")
                turn_right(90)
                self.update_facing_direction('right', 90)
                time.sleep(0.1)
                move_forward(0.6)
            elif chosen_direction == 'front':
                print("‚û°Ô∏è ‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏¥‡∏®‡∏´‡∏ô‡πâ‡∏≤")
                move_forward(0.6)

            # ‚úÖ 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏´‡∏ô‡∏î‡πÉ‡∏´‡∏°‡πà/‡πÄ‡∏î‡∏¥‡∏°
            existing_node_id = self.find_existing_node()

            if existing_node_id is not None:
                print(f"üîÑ ‡πÄ‡∏à‡∏≠‡πÇ‡∏´‡∏ô‡∏î‡πÄ‡∏î‡∏¥‡∏°: {existing_node_id}")
                self.maze_map.add_edge(previous_node_id, existing_node_id, 0.6)
                self.current_node_id = existing_node_id
                
                # **‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô wall ‡∏≠‡∏≠‡∏Å - ‡πÉ‡∏ä‡πâ A* ‡∏´‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏•‡∏¢**
                target_node_id = self.find_exploration_target()
                if target_node_id is None:
                    print("üéâ ‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß!")
                    break
                    
                print(f"üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà: ‡πÇ‡∏´‡∏ô‡∏î {target_node_id}")
                path, distance = a_star_search(self.maze_map, self.current_node_id, target_node_id)
                
                if path:
                    self.navigate_to_target(path)
                    self.current_node_id = target_node_id
                    
                    # **‡∏™‡πÅ‡∏Å‡∏ô wall ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô**
                    from controler.movement import ep_robot
                    wall_data = detect_walls_with_gimbal(ep_robot, self.current_facing_direction)
                    wall = wall_data[0]
                else:
                    # **‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ó‡∏≤‡∏á A* ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î**
                    print("‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ó‡∏≤‡∏á A*!")
                    break
            else:
                print("üÜï ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà")
                new_node_id, wall = self.add_node_here(auto_detect_walls=True)
                self.maze_map.add_edge(previous_node_id, new_node_id, 0.6)
                self.current_node_id = new_node_id

            self.path_history.append(self.current_node_id)
            print(f"üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥: ‡πÇ‡∏´‡∏ô‡∏î {len(self.maze_map.nodes)}")
            time.sleep(0.5)

        # ‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å
        start_node_obj = self.maze_map.nodes[start_node]
        max_distance = 0
        end_node = start_node
        
        for node_id, node in self.maze_map.nodes.items():
            if node_id != start_node:
                distance = math.sqrt((node.x - start_node_obj.x)**2 + (node.y - start_node_obj.y)**2)
                if distance > max_distance:
                    max_distance = distance
                    end_node = node_id

        self.maze_map.nodes[end_node].is_exit = True
        print(f"üéØ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏´‡∏ô‡∏î {end_node} ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å")
        
        self.show_map()
        return start_node, end_node

    def find_exploration_target(self):
        """‡∏´‡∏≤‡πÇ‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏ï‡πà‡∏≠ (neighbors + blocked_directions < 4)"""
        candidates = []
        
        for node_id, node in self.maze_map.nodes.items():
            if node_id == self.current_node_id:
                continue
                
            neighbors_count = len(node.connections)
            blocked_count = len(node.blocked_directions)
            total = neighbors_count + blocked_count
            
            if total < 4:
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏ô‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                current_node = self.maze_map.nodes[self.current_node_id]
                distance = math.sqrt((node.x - current_node.x)**2 + (node.y - current_node.y)**2)
                
                candidates.append((node_id, total, distance))
                print(f"üéØ ‡πÇ‡∏´‡∏ô‡∏î {node_id}: neighbors={neighbors_count}, blocked={blocked_count}, total={total}, distance={distance:.2f}")
        
        if not candidates:
            return None
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏ô‡∏î‡∏ó‡∏µ‡πà total ‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        candidates.sort(key=lambda x: (x[1], x[2]))
        target_id = candidates[0][0]
        
        print(f"‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ‡πÇ‡∏´‡∏ô‡∏î {target_id}")
        return target_id

    def navigate_to_target(self, path):
        """‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ - ‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏¥‡∏®‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô"""
        print(f"üö∂ ‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á: {' -> '.join(map(str, path))}")
        
        i = 0
        while i < len(path) - 1:
            current_id = path[i]
            current_node = self.maze_map.nodes[current_id]
            
            # ‡∏´‡∏≤‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÅ‡∏£‡∏Å
            next_id = path[i + 1]
            next_node = self.maze_map.nodes[next_id]
            
            dx = next_node.x - current_node.x
            dy = next_node.y - current_node.y
            
            if abs(dx) > abs(dy):
                target_direction = 'x+' if dx > 0 else 'x-'
            else:
                target_direction = 'y+' if dy > 0 else 'y-'
            
            # **‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏¥‡∏®‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô**
            total_distance = 0
            j = i
            segments = []
            
            while j < len(path) - 1:
                current_segment_node = self.maze_map.nodes[path[j]]
                next_segment_node = self.maze_map.nodes[path[j + 1]]
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á segment ‡∏ô‡∏µ‡πâ
                seg_dx = next_segment_node.x - current_segment_node.x
                seg_dy = next_segment_node.y - current_segment_node.y
                segment_distance = math.sqrt(seg_dx*seg_dx + seg_dy*seg_dy)
                
                if abs(seg_dx) > abs(seg_dy):
                    segment_direction = 'x+' if seg_dx > 0 else 'x-'
                else:
                    segment_direction = 'y+' if seg_dy > 0 else 'y-'
                
                # ‡∏ñ‡πâ‡∏≤‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
                if segment_direction == target_direction:
                    total_distance += segment_distance
                    segments.append(f"{path[j]} -> {path[j+1]} ({segment_distance:.2f}m)")
                    j += 1
                else:
                    break
            
            # ‡∏´‡∏±‡∏ô‡πÑ‡∏õ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            self.turn_to_direction(target_direction)
            
            # ‡πÄ‡∏î‡∏¥‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏ß‡∏°
            if len(segments) > 1:
                print(f"üö∂ ‡πÄ‡∏î‡∏¥‡∏ô‡∏¢‡∏≤‡∏ß {total_distance:.2f}m ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á {target_direction}:")
                for seg in segments:
                    print(f"   - {seg}")
            else:
                print(f"üö∂ ‡πÄ‡∏î‡∏¥‡∏ô {total_distance:.2f}m ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á {target_direction}")
            
            move_forward(total_distance)
            
            # ‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
            i = j

    def turn_to_direction(self, target_direction):
        """‡∏´‡∏±‡∏ô‡πÑ‡∏õ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ - ‡∏´‡∏°‡∏∏‡∏ô 180¬∞ ‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"""
        current_facing = self.current_facing_direction
        
        if target_direction == current_facing:
            return
        
        right_sequence = ['x+', 'y+', 'x-', 'y-']  # ‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤: ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å ‚Üí ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ ‚Üí ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å ‚Üí ‡πÉ‡∏ï‡πâ

        current_index = right_sequence.index(current_facing)
        target_index = right_sequence.index(target_direction)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        diff = (target_index - current_index) % 4
        
        if diff == 1:  # ‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤ 90¬∞
            print(f"üîÑ ‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤ 90¬∞")
            turn_right(90)
            self.update_facing_direction('right', 90)
        elif diff == 2:  # ‡∏´‡∏°‡∏∏‡∏ô 180¬∞
            print(f"üîÑ ‡∏´‡∏°‡∏∏‡∏ô 180¬∞")
            turn_right(180)  # **‡∏´‡∏°‡∏∏‡∏ô 180¬∞ ‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß**
            self.update_facing_direction('right', 180)
        elif diff == 3:  # ‡∏´‡∏°‡∏∏‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ 90¬∞
            print(f"üîÑ ‡∏´‡∏°‡∏∏‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ 90¬∞")
            turn_left(90)
            self.update_facing_direction('left', 90)
        
        time.sleep(0.2)

    # ...existing code...

# ...existing code...
    
    def show_map(self):
        """‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
        print(f"\nüìã ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà: {len(self.maze_map.nodes)} ‡πÇ‡∏´‡∏ô‡∏î")
        for node_id, node in self.maze_map.nodes.items():
            connections = [f"{n}({d:.1f})" for n, d in node.connections.items()]
            blocked_info = f" üö´{list(node.blocked_directions)}" if node.blocked_directions else ""
            
            print(f"   ‡πÇ‡∏´‡∏ô‡∏î {node_id} ({node.x:.3f}, {node.y:.3f}): {connections}{blocked_info}")
    
    def return_home(self, start_node, end_node):
        """‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô (‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô)"""
        print(f"\nüîç ‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö: {end_node} -> {start_node}")
        
        path, distance = a_star_search(self.maze_map, end_node, start_node)
        
        if not path:
            print("‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ó‡∏≤‡∏á!")
            return None, 0
            
        print(f"‚úÖ ‡πÄ‡∏à‡∏≠‡πÅ‡∏•‡πâ‡∏ß! {distance:.1f}m")
        print(f"üó∫Ô∏è ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á: {' -> '.join(map(str, path))}")
        
        # **‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å simple_walk_path ‡πÄ‡∏õ‡πá‡∏ô smart_walk_path**
        self.smart_walk_path(path)
        
        return path, distance
    
    def smart_walk_path(self, path):
        """‡πÄ‡∏î‡∏¥‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô - ‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏¥‡∏®‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô"""
        print("\nüö∂ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡∏Å‡∏•‡∏±‡∏ö (‡πÄ‡∏î‡∏¥‡∏ô‡∏¢‡∏≤‡∏ß‡πÜ ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á)")
        
        i = 0
        while i < len(path) - 1:
            current_node = self.maze_map.nodes[path[i]]
            next_node = self.maze_map.nodes[path[i + 1]]
            
            # ‡∏´‡∏≤‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÅ‡∏£‡∏Å
            dx = next_node.x - current_node.x
            dy = next_node.y - current_node.y
            
            if abs(dx) > abs(dy):
                target_direction = 'x+' if dx > 0 else 'x-'
            else:
                target_direction = 'y+' if dy > 0 else 'y-'
            
            # **‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏¥‡∏®‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô**
            total_distance = 0
            j = i
            segments = []
            
            while j < len(path) - 1:
                current_seg_node = self.maze_map.nodes[path[j]]
                next_seg_node = self.maze_map.nodes[path[j + 1]]
                
                seg_dx = next_seg_node.x - current_seg_node.x
                seg_dy = next_seg_node.y - current_seg_node.y
                segment_distance = math.sqrt(seg_dx*seg_dx + seg_dy*seg_dy)
                
                if abs(seg_dx) > abs(seg_dy):
                    segment_direction = 'x+' if seg_dx > 0 else 'x-'
                else:
                    segment_direction = 'y+' if seg_dy > 0 else 'y-'
                
                # ‡∏ñ‡πâ‡∏≤‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
                if segment_direction == target_direction:
                    total_distance += segment_distance
                    segments.append(f"‡πÇ‡∏´‡∏ô‡∏î {path[j]} -> {path[j+1]}")
                    j += 1
                else:
                    break
        
        # ‡∏´‡∏±‡∏ô‡πÑ‡∏õ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        self.turn_to_direction(target_direction)
        
        # ‡πÄ‡∏î‡∏¥‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏ß‡∏°
        if len(segments) > 1:
            print(f"üö∂ ‡πÄ‡∏î‡∏¥‡∏ô‡∏¢‡∏≤‡∏ß {total_distance:.3f}m ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á {target_direction}:")
            for seg in segments:
                print(f"   - {seg}")
        else:
            print(f"üö∂ ‡πÄ‡∏î‡∏¥‡∏ô {total_distance:.3f}m: {segments[0]}")
        
        move_forward(total_distance)
        
        # ‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        i = j
    
        print("üè† ‡∏ñ‡∏∂‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")

    def manual_calibrate_orientation(self):
        """
        Calibrate ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÅ‡∏ö‡∏ö manual ‡πÇ‡∏î‡∏¢‡∏î‡∏π‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏£‡∏¥‡∏á
        """
        print("\nüß≠ ‡∏Å‡∏≥‡∏•‡∏±‡∏á calibrate ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÅ‡∏ö‡∏ö manual...")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        start_pos = get_current_position()
        start_yaw = get_current_orientation()
        
        print(f"üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ({start_pos[0]:.3f}, {start_pos[1]:.3f})")
        print(f"üß≠ ‡∏°‡∏∏‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {start_yaw:.1f}¬∞")
        
        # ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        print("üö∂ ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠ calibrate...")
        move_forward(0.2)  # ‡πÄ‡∏î‡∏¥‡∏ô 20cm
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
        end_pos = get_current_position()
        dx = end_pos[0] - start_pos[0]
        dy = end_pos[1] - start_pos[1]
        
        print(f"üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô: ({end_pos[0]:.3f}, {end_pos[1]:.3f})")
        print(f"üìê ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: dx={dx:.3f}, dy={dy:.3f}")
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
        if abs(dx) > abs(dy):
            if dx > 0:
                real_direction = 'x+'  # ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å
                print("üß≠ ‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å (x+)")
            else:
                real_direction = 'x-'  # ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å
                print("üß≠ ‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å (x-)")
        else:
            if dy > 0:
                real_direction = 'y+'  # ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏ó‡∏¥‡∏®‡πÄ‡∏´‡∏ô‡∏∑‡∏≠
                print("üß≠ ‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏¥‡∏®‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ (y+)")
            else:
                real_direction = 'y-'  # ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏ó‡∏¥‡∏®‡πÉ‡∏ï‡πâ
                print("üß≠ ‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏¥‡∏®‡πÉ‡∏ï‡πâ (y-)")
        
        # Calibrate ‡∏î‡πâ‡∏ß‡∏¢‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö
        calibrate_initial_orientation(real_direction)
        
        # ‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°
        print("üîô ‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°...")
        move_forward(-0.2)  # ‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á
        
        print("‚úÖ Manual calibration ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")

def main():
    print("ü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö...")
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
    init_movement_system()
    
    runner = MazeRunner()
    
    # try:
    print("‚è≥ ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
    time.sleep(0.5)
    
    # ‡∏™‡∏≥‡∏£‡∏ß‡∏à
    start, end = runner.explore_maze()
    
    print("\n‚è±Ô∏è ‡∏û‡∏±‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
    time.sleep(0.5)
    
    # ‡∏Å‡∏•‡∏±‡∏ö
    path, distance = runner.return_home(start, end)
    
    print(f"\nüéâ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    print(f"üìè ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö: {distance:.1f}m")
    print(f"üó∫Ô∏è ‡πÇ‡∏´‡∏ô‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(runner.maze_map.nodes)}")
        
    # except KeyboardInterrupt:
    #     print("\n‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î")
    # except Exception as e:
    #     print(f"\n‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    # finally:
    cleanup_movement_system()

if __name__ == '__main__':
    main()