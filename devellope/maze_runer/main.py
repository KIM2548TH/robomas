import time
import sys
import os
import math

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import module
sys.path.append(os.path.join(os.path.dirname(__file__), 'controler'))

from controler.movement import (
    init_movement_system, 
    cleanup_movement_system,
    move_forward, 
    turn_right, 
    turn_left,
    get_current_position,
    get_current_orientation, 
    get_movement_stats,
    set_move_distance,
    detect_walls_at_current_position,
    # **import ‡∏£‡∏∞‡∏ö‡∏ö calibration**
    calibrate_initial_orientation,
    get_real_direction_from_yaw,
    get_target_yaw_for_direction
    # **‡∏•‡∏ö convert_blocked_directions_to_compass**
)
from controler.map import Graph, a_star_search, Node, calculate_direction

class MazeRunner:
    def __init__(self):
        self.maze_map = Graph()
        self.current_node_id = None
        self.path_history = []
        self.move_distance = 0.5
        set_move_distance(self.move_distance)
        
        # **‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á**
        self.current_facing_direction = 'y+'  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏¥‡∏®‡πÄ‡∏´‡∏ô‡∏∑‡∏≠
        self.direction_history = []  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô
        
        print(f"üß≠ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏¥‡∏®: {self.current_facing_direction} (‡πÄ‡∏´‡∏ô‡∏∑‡∏≠)")
    
    def update_facing_direction(self, turn_direction, angle=90):
        """
        ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏∏‡∏ô
        
        Args:
            turn_direction (str): 'right' ‡∏´‡∏£‡∏∑‡∏≠ 'left'
            angle (float): ‡∏°‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏∏‡∏ô (‡∏≠‡∏á‡∏®‡∏≤)
        """
        if angle != 90:
            print(f"‚ö†Ô∏è ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô 90¬∞ ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö {angle}¬∞)")
            return
        
        # ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤
        right_sequence = ['y+', 'x+', 'y-', 'x-']  # ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ ‚Üí ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å ‚Üí ‡πÉ‡∏ï‡πâ ‚Üí ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å
        
        current_index = right_sequence.index(self.current_facing_direction)
        
        if turn_direction.lower() == 'right':
            new_index = (current_index + 1) % 4
        elif turn_direction.lower() == 'left':
            new_index = (current_index - 1) % 4
        else:
            print(f"‚ùå ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {turn_direction}")
            return
        
        old_direction = self.current_facing_direction
        self.current_facing_direction = right_sequence[new_index]
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
        self.direction_history.append({
            'action': f'turn_{turn_direction}',
            'from': old_direction,
            'to': self.current_facing_direction,
            'node': self.current_node_id
        })
        
        direction_names = {
            'y+': '‡πÄ‡∏´‡∏ô‡∏∑‡∏≠', 'y-': '‡πÉ‡∏ï‡πâ', 'x+': '‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å', 'x-': '‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å'
        }
        
        print(f"üîÑ ‡∏´‡∏°‡∏∏‡∏ô{turn_direction}: {direction_names[old_direction]} ‚Üí {direction_names[self.current_facing_direction]}")
        print(f"üß≠ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏¥‡∏®: {self.current_facing_direction} ({direction_names[self.current_facing_direction]})")
    
    def verify_direction_from_movement(self, from_node_id, to_node_id):
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÇ‡∏´‡∏ô‡∏î
        """
        if from_node_id is None or to_node_id is None:
            return
        
        from_node = self.maze_map.nodes[from_node_id]
        to_node = self.maze_map.nodes[to_node_id]
        
        dx = to_node.x - from_node.x
        dy = to_node.y - from_node.y
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
        if abs(dx) > abs(dy):
            actual_direction = 'x+' if dx > 0 else 'x-'
        else:
            actual_direction = 'y+' if dy > 0 else 'y-'
        
        direction_names = {
            'y+': '‡πÄ‡∏´‡∏ô‡∏∑‡∏≠', 'y-': '‡πÉ‡∏ï‡πâ', 'x+': '‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å', 'x-': '‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å'
        }
        
        print(f"üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á:")
        print(f"   - ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: dx={dx:.3f}, dy={dy:.3f}")
        print(f"   - ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà: {actual_direction} ({direction_names[actual_direction]})")
        print(f"   - ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÑ‡∏ß‡πâ: {self.current_facing_direction} ({direction_names[self.current_facing_direction]})")
        
        if actual_direction == self.current_facing_direction:
            print("‚úÖ ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!")
        else:
            print("‚ö†Ô∏è ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô! ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç...")
            self.current_facing_direction = actual_direction
            print(f"üîÑ ‡∏õ‡∏£‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô: {actual_direction} ({direction_names[actual_direction]})")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        self.direction_history.append({
            'action': 'verify_movement',
            'from_node': from_node_id,
            'to_node': to_node_id,
            'expected': self.current_facing_direction,
            'actual': actual_direction,
            'correct': actual_direction == self.current_facing_direction
        })
    
    def get_real_position(self):
        """‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå"""
        return get_current_position()
        
    def add_node_here(self, is_exit=False, blocked_directions=None, auto_detect_walls=True):
        """
        ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏ô‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        
        Args:
            is_exit (bool): ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            blocked_directions (list): ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô (‡πÅ‡∏Å‡∏ô‡∏à‡∏£‡∏¥‡∏á) ‡πÄ‡∏ä‡πà‡∏ô ['x+', 'y-']
            auto_detect_walls (bool): ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        """
        x, y = self.get_real_position()
        
        print(f"üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå: x={x:.3f}, y={y:.3f}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏î‡πâ‡∏ß‡∏¢ subscription
        detected_walls = []
        if auto_detect_walls:
            print("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ subscription...")
            detected_walls = detect_walls_at_current_position()
            
        # ‡∏£‡∏ß‡∏°‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ manual
        all_blocked = []
        if detected_walls:
            # **‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á**
            all_blocked.extend(detected_walls)  
            print(f"ü§ñ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡πÅ‡∏Å‡∏ô‡∏à‡∏£‡∏¥‡∏á): {detected_walls}")
            
        if blocked_directions:
            all_blocked.extend(blocked_directions)
            print(f"üë§ ‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô manual (‡πÅ‡∏Å‡∏ô‡∏à‡∏£‡∏¥‡∏á): {blocked_directions}")
        
        # ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥
        final_blocked = list(set(all_blocked))
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô‡∏£‡∏ß‡∏°
        if final_blocked:
            print(f"üö´ ‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô‡∏£‡∏ß‡∏° (‡πÅ‡∏Å‡∏ô‡∏à‡∏£‡∏¥‡∏á): {final_blocked}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
        stats = get_movement_stats()
        print(f"üöÄ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß: {stats['speed']:.3f}m/s")
        print(f"‚öñÔ∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£: {stats['stable_count']} iterations")
        
        display_x = round(x, 1)
        display_y = round(y, 1)
        
        node_id = self.maze_map.add_node(x=x, y=y, is_exit=is_exit, 
                                       blocked_directions=final_blocked)
        print(f"üìç ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏ô‡∏î {node_id} ‡∏ó‡∏µ‡πà ({display_x}, {display_y})")
        return node_id

    def find_existing_node(self):
        """‡∏´‡∏≤‡πÇ‡∏´‡∏ô‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        x, y = self.get_real_position()
        
        print(f"üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: x={x:.3f}, y={y:.3f}")
        
        best_node = None
        min_diff = float('inf')
        tolerance = 0.3  # 30cm
        
        for node_id, node in self.maze_map.nodes.items():
            x_diff = abs(node.x - x)
            y_diff = abs(node.y - y)
            total_diff = x_diff + y_diff
            
            print(f"   ‡πÇ‡∏´‡∏ô‡∏î {node_id} ({node.x:.3f}, {node.y:.3f}): "
                  f"X:{x_diff:.3f} Y:{y_diff:.3f}", end="")
            
            if x_diff <= tolerance and y_diff <= tolerance and total_diff < min_diff:
                min_diff = total_diff
                best_node = node_id
                print(f" ‚Üê ‡πÄ‡∏à‡∏≠!")
            else:
                print("")
        
        return best_node
    
    def move_with_detection(self, turn_direction=None, turn_angle=90, 
                          blocked_directions=None, auto_detect_walls=True):
        """
        ‡πÄ‡∏î‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏´‡∏ô‡∏î‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏™‡∏°‡∏≠ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô
        
        Args:
            turn_direction (str): ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß 'right' ‡∏´‡∏£‡∏∑‡∏≠ 'left'
            turn_angle (float): ‡∏°‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß (‡∏≠‡∏á‡∏®‡∏≤)
            blocked_directions (list): ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏ô‡∏î‡πÉ‡∏´‡∏°‡πà (manual)
            auto_detect_walls (bool): ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        """
        # ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        if turn_direction == "right":
            print(f"üîÑ ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏Ç‡∏ß‡∏≤ {turn_angle}¬∞")
            turn_right(turn_angle)
        elif turn_direction == "left":
            print(f"üîÑ ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏ã‡πâ‡∏≤‡∏¢ {turn_angle}¬∞")
            turn_left(turn_angle)
            
        time.sleep(0.2)
        
        # ‡πÄ‡∏î‡∏¥‡∏ô
        print(f"üö∂ ‡πÄ‡∏î‡∏¥‡∏ô {self.move_distance}m")
        move_forward(self.move_distance)
        
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡πÇ‡∏´‡∏ô‡∏î‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏™‡∏°‡∏≠
        existing_node = self.find_existing_node()
        
        if existing_node is not None:
            # ‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏ô‡∏î‡πÄ‡∏î‡∏¥‡∏°
            print(f"‚úÖ ‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏ô‡∏î‡πÄ‡∏î‡∏¥‡∏° {existing_node}")
            node_id = existing_node
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏ô‡∏î‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            if auto_detect_walls or blocked_directions:
                print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏ô‡∏î‡πÄ‡∏î‡∏¥‡∏°...")
                if auto_detect_walls:
                    detected_walls = detect_walls_at_current_position()
                    # **‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á**
                    for direction in detected_walls:
                        self.maze_map.add_blocked_direction_to_node(node_id, direction)
                
                if blocked_directions:
                    for direction in blocked_directions:
                        self.maze_map.add_blocked_direction_to_node(node_id, direction)
        else:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏´‡∏ô‡∏î‡πÉ‡∏´‡∏°‡πà
            print(f"‚ûï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏´‡∏ô‡∏î‡πÉ‡∏´‡∏°‡πà")
            node_id = self.add_node_here(blocked_directions=blocked_directions,
                                       auto_detect_walls=auto_detect_walls)
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡πÇ‡∏´‡∏ô‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        if self.path_history:
            prev_node = self.path_history[-1]
            if prev_node != node_id:  # ‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
                if prev_node not in self.maze_map.nodes[node_id].connections:
                    self.maze_map.add_edge(prev_node, node_id, self.move_distance)
                    print(f"üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° {prev_node} -> {node_id}")
                else:
                    print(f"‚úì ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß {prev_node} -> {node_id}")
        
        self.path_history.append(node_id)
        self.current_node_id = node_id
        
        return node_id
    
    def explore_maze(self):
        """‡∏™‡∏≥‡∏£‡∏ß‡∏à‡πÄ‡∏Ç‡∏≤‡∏ß‡∏á‡∏Å‡∏ï ‡∏û‡∏£‡πâ‡∏≠‡∏° calibration"""
        print("üèÅ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏≥‡∏£‡∏ß‡∏à‡πÄ‡∏Ç‡∏≤‡∏ß‡∏á‡∏Å‡∏ï!")
        
        # **‡πÄ‡∏û‡∏¥‡πà‡∏°: Manual calibration ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£**
        print("\nüß≠ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô...")
        print("   ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ manual calibration ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/n)")
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ manual calibration
        # self.manual_calibrate_orientation()
    
        # ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        start_node = self.add_node_here(auto_detect_walls=False)
        self.path_history.append(start_node)
        self.current_node_id = start_node
        
        # 1. ‡πÄ‡∏î‡∏¥‡∏ô 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        print("\n1Ô∏è‚É£ ‡πÄ‡∏î‡∏¥‡∏ô 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        for i in range(3):
            print(f"\n--- ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {i+1} ---")
            self.move_with_detection(auto_detect_walls=False)
            time.sleep(0.3)
        
        # 2. ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏Ç‡∏ß‡∏≤ + ‡πÄ‡∏î‡∏¥‡∏ô
        print("\n2Ô∏è‚É£ ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏Ç‡∏ß‡∏≤ + ‡πÄ‡∏î‡∏¥‡∏ô")
        self.move_with_detection("right", 90, auto_detect_walls=False)
        time.sleep(0.3)
        
        # 3. ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏Ç‡∏ß‡∏≤ + ‡πÄ‡∏î‡∏¥‡∏ô
        print("\n3Ô∏è‚É£ ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏Ç‡∏ß‡∏≤ + ‡πÄ‡∏î‡∏¥‡∏ô")
        self.move_with_detection("right", 90, auto_detect_walls=False)
        time.sleep(0.3)
        
        # 4. ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏Ç‡∏ß‡∏≤ + ‡πÄ‡∏î‡∏¥‡∏ô (‡∏Ñ‡∏ß‡∏£‡πÄ‡∏à‡∏≠‡πÇ‡∏´‡∏ô‡∏î‡πÄ‡∏î‡∏¥‡∏°)
        print("\n4Ô∏è‚É£ ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏Ç‡∏ß‡∏≤ + ‡πÄ‡∏î‡∏¥‡∏ô")
        self.move_with_detection("right", 90, auto_detect_walls=False)
        time.sleep(0.3)
        
        # 5. ‡πÄ‡∏î‡∏¥‡∏ô 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        print("\n5Ô∏è‚É£ ‡πÄ‡∏î‡∏¥‡∏ô 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        for i in range(2):
            print(f"\n--- ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {i+1} ---")
            self.move_with_detection(auto_detect_walls=False)
            time.sleep(0.3)
        
        # ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏ã‡πâ‡∏≤‡∏¢ 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á + ‡πÄ‡∏î‡∏¥‡∏ô
        print("\n6Ô∏è‚É£ ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏ã‡πâ‡∏≤‡∏¢ + ‡πÄ‡∏î‡∏¥‡∏ô")
        self.move_with_detection("left", 90, auto_detect_walls=False)
        time.sleep(0.3)
        
        print("\n7Ô∏è‚É£ ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏ã‡πâ‡∏≤‡∏¢ + ‡πÄ‡∏î‡∏¥‡∏ô")
        self.move_with_detection("left", 90, auto_detect_walls=False)
        time.sleep(0.3)

        self.move_with_detection(auto_detect_walls=False)
        time.sleep(0.3)
        
        # print("\n8Ô∏è‚É£ ‡πÄ‡∏î‡∏¥‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢")
        # self.move_with_detection(auto_detect_walls=True)
        # time.sleep(0.3)
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å
        end_node = self.current_node_id
        self.maze_map.nodes[end_node].is_exit = True
        print(f"üéØ ‡πÇ‡∏´‡∏ô‡∏î {end_node} = ‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
        self.show_map()
        
        return start_node, end_node
    
    def show_map(self):
        """‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
        print(f"\nüìã ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà: {len(self.maze_map.nodes)} ‡πÇ‡∏´‡∏ô‡∏î")
        for node_id, node in self.maze_map.nodes.items():
            connections = [f"{n}({d:.1f})" for n, d in node.connections.items()]
            blocked_info = f" üö´{list(node.blocked_directions)}" if node.blocked_directions else ""
            
            print(f"   ‡πÇ‡∏´‡∏ô‡∏î {node_id} ({node.x:.3f}, {node.y:.3f}): {connections}{blocked_info}")
    
    def return_home(self, start_node, end_node):
        """‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô (‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô)"""
        print(f"\nüîç ‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö: {end_node} -> {start_node}")
        
        path, distance = a_star_search(self.maze_map, end_node, start_node)
        
        if not path:
            print("‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ó‡∏≤‡∏á!")
            return None, 0
            
        print(f"‚úÖ ‡πÄ‡∏à‡∏≠‡πÅ‡∏•‡πâ‡∏ß! {distance:.1f}m")
        print(f"üó∫Ô∏è ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á: {' -> '.join(map(str, path))}")
        
        # **‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å simple_walk_path ‡πÄ‡∏õ‡πá‡∏ô smart_walk_path**
        self.smart_walk_path(path)
        
        return path, distance
    
    def smart_walk_path(self, path):
        """‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á - ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"""
        print("\nüö∂ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡∏Å‡∏•‡∏±‡∏ö (‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á)")
        
        # **‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏ß‡∏à**
        # ‡∏™‡∏≥‡∏£‡∏ß‡∏à: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô y+ ‚Üí ‡πÄ‡∏î‡∏¥‡∏ô 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‚Üí ‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤ 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‚Üí ‡πÄ‡∏î‡∏¥‡∏ô 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‚Üí ‡∏´‡∏°‡∏∏‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        # ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: y+ ‚Üí (‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤ 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á) ‚Üí y- ‚Üí (‡∏´‡∏°‡∏∏‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á) ‚Üí y-
        current_direction = 'y-'  # ‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏¥‡∏®‡πÉ‡∏ï‡πâ
        
        print(f"üß≠ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏¥‡∏®: {current_direction} (‡πÉ‡∏ï‡πâ)")
        
        # ‡πÅ‡∏°‡∏õ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô
        direction_names = {
            'y+': '‡πÄ‡∏´‡∏ô‡∏∑‡∏≠', 'y-': '‡πÉ‡∏ï‡πâ', 'x+': '‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å', 'x-': '‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å'
        }
        
        # ‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡∏à‡∏≤‡∏Å‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏õ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤ 90¬∞ ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
        right_turn_sequence = ['y+', 'x+', 'y-', 'x-']  # ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤
        
        for i in range(len(path) - 1):
            current_node = self.maze_map.nodes[path[i]]
            next_node = self.maze_map.nodes[path[i + 1]]
            
            print(f"\nüö∂‚Äç‚ôÇÔ∏è ‡πÇ‡∏´‡∏ô‡∏î {path[i]} -> ‡πÇ‡∏´‡∏ô‡∏î {path[i+1]}")
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
            dx = next_node.x - current_node.x
            dy = next_node.y - current_node.y
            distance = math.sqrt(dx*dx + dy*dy)
            
            print(f"üìç ‡∏à‡∏≤‡∏Å ({current_node.x:.3f}, {current_node.y:.3f}) "
                  f"‡πÑ‡∏õ ({next_node.x:.3f}, {next_node.y:.3f})")
            print(f"üìè ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á: {distance:.3f}m")
            print(f"üìê ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: dx={dx:.3f}, dy={dy:.3f}")
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            if abs(dx) > abs(dy):
                target_direction = 'x+' if dx > 0 else 'x-'
            else:
                target_direction = 'y+' if dy > 0 else 'y-'
            
            print(f"üß≠ ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏¥‡∏®: {current_direction} ({direction_names[current_direction]})")
            print(f"üéØ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏ó‡∏¥‡∏®: {target_direction} ({direction_names[target_direction]})")
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤
            current_index = right_turn_sequence.index(current_direction)
            target_index = right_turn_sequence.index(target_direction)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤
            if target_index >= current_index:
                turns_needed = target_index - current_index
            else:
                turns_needed = (4 - current_index) + target_index
            
            print(f"üîÑ ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤ {turns_needed} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
            
            # ‡∏´‡∏°‡∏∏‡∏ô
            for turn_num in range(turns_needed):
                print(f"   üîÑ ‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤ 90¬∞ (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {turn_num + 1})")
                turn_right(90)
                time.sleep(0.2)
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            if turns_needed > 0:
                current_direction = target_direction
                print(f"‚úÖ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏¥‡∏®: {current_direction} ({direction_names[current_direction]})")
            else:
                print("‚û°Ô∏è ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏°‡∏∏‡∏ô (‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß)")
            
            time.sleep(0.3)
            
            # ‡πÄ‡∏î‡∏¥‡∏ô
            print(f"üö∂ ‡πÄ‡∏î‡∏¥‡∏ô {distance:.3f}m ‡πÉ‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á {target_direction}")
            move_forward(distance)
            time.sleep(0.3)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô
            final_pos = get_current_position()
            print(f"üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô: ({final_pos[0]:.3f}, {final_pos[1]:.3f})")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ñ‡∏π‡∏Å‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            end_dx = final_pos[0] - current_node.x
            end_dy = final_pos[1] - current_node.y
            
            if target_direction == 'x+' and end_dx > 0:
                print("‚úÖ ‡πÄ‡∏î‡∏¥‡∏ô‡∏ñ‡∏π‡∏Å‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á (‡πÑ‡∏õ‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å)")
            elif target_direction == 'x-' and end_dx < 0:
                print("‚úÖ ‡πÄ‡∏î‡∏¥‡∏ô‡∏ñ‡∏π‡∏Å‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á (‡πÑ‡∏õ‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å)")
            elif target_direction == 'y+' and end_dy > 0:
                print("‚úÖ ‡πÄ‡∏î‡∏¥‡∏ô‡∏ñ‡∏π‡∏Å‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á (‡πÑ‡∏õ‡∏ó‡∏¥‡∏®‡πÄ‡∏´‡∏ô‡∏∑‡∏≠)")
            elif target_direction == 'y-' and end_dy < 0:
                print("‚úÖ ‡πÄ‡∏î‡∏¥‡∏ô‡∏ñ‡∏π‡∏Å‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á (‡πÑ‡∏õ‡∏ó‡∏¥‡∏®‡πÉ‡∏ï‡πâ)")
            else:
                print("‚ö†Ô∏è ‡πÄ‡∏î‡∏¥‡∏ô‡∏ú‡∏¥‡∏î‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á!")
    
        print("üè† ‡∏ñ‡∏∂‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")

    def manual_calibrate_orientation(self):
        """
        Calibrate ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÅ‡∏ö‡∏ö manual ‡πÇ‡∏î‡∏¢‡∏î‡∏π‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏£‡∏¥‡∏á
        """
        print("\nüß≠ ‡∏Å‡∏≥‡∏•‡∏±‡∏á calibrate ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÅ‡∏ö‡∏ö manual...")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        start_pos = get_current_position()
        start_yaw = get_current_orientation()
        
        print(f"üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ({start_pos[0]:.3f}, {start_pos[1]:.3f})")
        print(f"üß≠ ‡∏°‡∏∏‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {start_yaw:.1f}¬∞")
        
        # ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        print("üö∂ ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠ calibrate...")
        move_forward(0.2)  # ‡πÄ‡∏î‡∏¥‡∏ô 20cm
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
        end_pos = get_current_position()
        dx = end_pos[0] - start_pos[0]
        dy = end_pos[1] - start_pos[1]
        
        print(f"üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô: ({end_pos[0]:.3f}, {end_pos[1]:.3f})")
        print(f"üìê ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: dx={dx:.3f}, dy={dy:.3f}")
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
        if abs(dx) > abs(dy):
            if dx > 0:
                real_direction = 'x+'  # ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å
                print("üß≠ ‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å (x+)")
            else:
                real_direction = 'x-'  # ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å
                print("üß≠ ‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å (x-)")
        else:
            if dy > 0:
                real_direction = 'y+'  # ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏ó‡∏¥‡∏®‡πÄ‡∏´‡∏ô‡∏∑‡∏≠
                print("üß≠ ‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏¥‡∏®‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ (y+)")
            else:
                real_direction = 'y-'  # ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏ó‡∏¥‡∏®‡πÉ‡∏ï‡πâ
                print("üß≠ ‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏¥‡∏®‡πÉ‡∏ï‡πâ (y-)")
        
        # Calibrate ‡∏î‡πâ‡∏ß‡∏¢‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö
        calibrate_initial_orientation(real_direction)
        
        # ‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°
        print("üîô ‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°...")
        move_forward(-0.2)  # ‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á
        
        print("‚úÖ Manual calibration ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")

def main():
    print("ü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö...")
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
    init_movement_system()
    
    runner = MazeRunner()
    
    try:
        print("‚è≥ ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
        time.sleep(2)
        
        # ‡∏™‡∏≥‡∏£‡∏ß‡∏à
        start, end = runner.explore_maze()
        
        print("\n‚è±Ô∏è ‡∏û‡∏±‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
        time.sleep(2)
        
        # ‡∏Å‡∏•‡∏±‡∏ö
        path, distance = runner.return_home(start, end)
        
        print(f"\nüéâ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        print(f"üìè ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö: {distance:.1f}m")
        print(f"üó∫Ô∏è ‡πÇ‡∏´‡∏ô‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(runner.maze_map.nodes)}")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î")
    except Exception as e:
        print(f"\n‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    finally:
        cleanup_movement_system()

if __name__ == '__main__':
    main()