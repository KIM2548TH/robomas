# -*-coding:utf-8-*-
import csv
import os
import time
import statistics
import math
from collections import deque

from .pid import PID, TurnPID
from logger import log_robot_data

# --- Global Variables ---
latest_chassis_position = [0, 0, 0]
latest_chassis_attitude = [0, 0, 0]
lastest_distance = [0]
tof_readings = deque(maxlen=5)   # <-- ‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å list ‡πÄ‡∏õ‡πá‡∏ô deque
filtered_distance = [0]
markers = []

LOG_CSV_PATH = "robot_log.csv"
log_csv_header_written = False

def log_robot_data():
    global log_csv_header_written
    timestamp = time.time()
    position = list(latest_chassis_position)
    tof1 = filtered_distance[0]  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß
    # ... (‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö marker ‡πÄ‡∏õ‡πá‡∏ô object ‡∏´‡∏£‡∏∑‡∏≠ string
    if markers:
        marker_last = markers[-1]
        marker_name = marker_last.text if hasattr(marker_last, "text") else str(marker_last)
    else:
        marker_name = ""
    yaw_gimbal = latest_chassis_attitude[0] if len(latest_chassis_attitude) > 0 else None

    write_header = not os.path.exists(LOG_CSV_PATH) or not log_csv_header_written
    with open(LOG_CSV_PATH, "a", newline="") as f:
        writer = csv.writer(f)
        if write_header:
            writer.writerow(["timestamp", "position", "tof1", "marker", "yaw_gimbal"])
            log_csv_header_written = True
        writer.writerow([
            timestamp,
            f"{position[0]:.3f},{position[1]:.3f}",
            tof1,
            marker_name,
            yaw_gimbal
        ])

def get_stable_distance_reading():
    """
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô median filter ‡πÅ‡∏•‡πâ‡∏ß (mm)
    """
    global filtered_distance
    return filtered_distance[0]

def apply_median_filter(new_value, buffer_size=7):
    global tof_readings, filtered_distance
    tof_readings.append(new_value)
    if len(tof_readings) > buffer_size:
        tof_readings.pop(0)
    if len(tof_readings) >= 3:
        filtered_value = statistics.median(tof_readings)
    else:
        filtered_value = sum(tof_readings) / len(tof_readings)
    filtered_distance[0] = filtered_value
    return filtered_value

def sub_data_distance(sub_info):
    global lastest_distance
    raw_distance = sub_info[0]
    filtered_value = apply_median_filter(raw_distance)
    lastest_distance[0] = filtered_value
    log_robot_data()

def sub_chassis_position(position_info):
    global latest_chassis_position
    latest_chassis_position = list(position_info)
    log_robot_data()

def sub_chassis_attitude(attitude_info):
    global latest_chassis_attitude
    latest_chassis_attitude = list(attitude_info)
    log_robot_data()

def sub_data_angle(angle_info):
    global latest_chassis_attitude
    # ‡∏™‡∏°‡∏°‡∏ï‡∏¥ angle_info = [pitch, yaw, ...]
    # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á angle_info
    if len(angle_info) >= 2:
        latest_chassis_attitude[0] = angle_info[1]  # ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö index ‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á
    log_robot_data()

class MarkerInfo:
    def __init__(self, x, y, w, h, info):
        self._x = x
        self._y = y
        self._w = w
        self._h = h
        self._info = info
    @property
    def text(self):
        return str(self._info)

def on_detect_marker(marker_info):
    global markers
    x, y, w, h, info = marker_info[0]
    markers.clear()  # <<== ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
    markers.append(MarkerInfo(x, y, w, h, info))
    log_robot_data()

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ global ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PID ‡πÅ‡∏•‡∏∞ tracking
move_pid_x = None
move_pid_y = None
turn_pid = None  # **‡πÄ‡∏û‡∏¥‡πà‡∏°: PID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô**

def correct_robot_orientation(ep_chassis, target_yaw=0):
    """
    ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏´‡∏±‡∏ô‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    
    Args:
        ep_chassis: chassis controller
        target_yaw (float): ‡∏°‡∏∏‡∏° yaw ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (‡∏≠‡∏á‡∏®‡∏≤)
    """
    global turn_pid, latest_chassis_attitude
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô PID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô
    if turn_pid is None:
        turn_pid = TurnPID(kp=2.0*0.40, ki=0.007*0.40, kd=0.03*0.40)
    
    turn_pid.reset()
    
    current_yaw = latest_chassis_attitude[0]
    yaw_error = target_yaw - current_yaw
    
    # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á -180 ‡∏ñ‡∏∂‡∏á 180
    while yaw_error > 180:
        yaw_error -= 360
    while yaw_error < -180:
        yaw_error += 360
    
    print(f"üß≠ ‡∏õ‡∏£‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á: ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô {current_yaw:.1f}¬∞ -> ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ {target_yaw:.1f}¬∞ (‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏°‡∏∏‡∏ô {yaw_error:.1f}¬∞)")
    
    # ‡∏ñ‡πâ‡∏≤‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏≠‡∏á‡∏®‡∏≤ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö
    if abs(yaw_error) < 0.1:
        print("‚úÖ ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß")
        return
    
    tolerance = 0.1  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ
    stable_count = 0
    max_iterations = 50
    iteration = 0
    
    while iteration < max_iterations:
        iteration += 1
        
        current_yaw = latest_chassis_attitude[0]
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì PID output
        turn_output, angle_error, p, i, d = turn_pid.compute(target_yaw, current_yaw)
        
        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô
        max_turn_speed = 200  # ‡∏≠‡∏á‡∏®‡∏≤/‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        turn_speed = max(-max_turn_speed, min(max_turn_speed, turn_output))
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        if iteration % 10 == 0:
            print(f"   üîÑ ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_yaw:.1f}¬∞ ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {angle_error:.1f}¬∞ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß: {turn_speed:.1f}¬∞/s")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß
        if abs(angle_error) < tolerance:
            stable_count += 1
            if stable_count >= 30:
                print("‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à!")
                break
        else:
            stable_count = 0
        
        # ‡∏™‡∏±‡πà‡∏á‡∏´‡∏°‡∏∏‡∏ô chassis
        ep_chassis.drive_speed(x=0, y=0, z=turn_speed)
        time.sleep(0.01)
    
    # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô
    ep_chassis.drive_speed(x=0, y=0, z=0)
    time.sleep(0.1)

def move_direction_pid(ep_chassis, direction, distance):
    """
    ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏î‡πâ‡∏ß‡∏¢ PID control (‡πÑ‡∏°‡πà‡∏´‡∏°‡∏∏‡∏ô‡∏ï‡∏±‡∏ß - ‡∏™‡πÑ‡∏•‡∏î‡πå)
    
    Args:
        ep_chassis: chassis controller
        direction (str): ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà ('x+', 'x-', 'y+', 'y-')
        distance (float): ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà (‡πÄ‡∏°‡∏ï‡∏£)
    
    Returns:
        float: ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
    """
    global move_pid_x, move_pid_y, latest_chassis_position
    
    # ‡πÅ‡∏°‡∏õ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
    direction_map = {
        'x+': {'x': 1, 'y': 0, 'name': '‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ (x+)'},     # ‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
        'x-': {'x': -1, 'y': 0, 'name': '‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á (x-)'},    # ‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á
        'y+': {'x': 0, 'y': 1, 'name': '‡∏Ç‡∏ß‡∏≤ (y+)'},          # ‡πÑ‡∏õ‡∏Ç‡∏ß‡∏≤
        'y-': {'x': 0, 'y': -1, 'name': '‡∏ã‡πâ‡∏≤‡∏¢ (y-)'}         # ‡πÑ‡∏õ‡∏ã‡πâ‡∏≤‡∏¢
    }
    
    if direction not in direction_map:
        print(f"‚ùå ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {direction}")
        return 0
    
    dir_info = direction_map[direction]
    print(f"üö∂ ‡∏™‡πÑ‡∏•‡∏î‡πå{dir_info['name']} {distance:.3f}m")
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô PID controllers
    if move_pid_x is None:
        move_pid_x = PID(kp=2.0, ki=0.01, kd=0)
    if move_pid_y is None:
        move_pid_y = PID(kp=2.0, ki=0.01, kd=0)
    
    # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï PID
    move_pid_x.reset()
    move_pid_y.reset()
    
    # **‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ list() ‡πÅ‡∏ó‡∏ô .copy()**
    start_pos = list(latest_chassis_position)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    target_x = start_pos[0] + (distance * dir_info['x'])
    target_y = start_pos[1] + (distance * dir_info['y'])
    
    tolerance = 0.05  # 1cm
    stable_iterations = 0
    max_iterations = 50
    iteration = 0
    
    print(f"üìç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà: ({start_pos[0]:.3f}, {start_pos[1]:.3f})")
    print(f"üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ({target_x:.3f}, {target_y:.3f})")
    
    while iteration < max_iterations:
        iteration += 1

        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        dx = latest_chassis_position[0] - start_pos[0]
        dy = latest_chassis_position[1] - start_pos[1]
        current_distance = math.sqrt(dx*dx + dy*dy)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì error ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏Å‡∏ô
        error_x = target_x - latest_chassis_position[0]
        error_y = target_y - latest_chassis_position[1]
        total_error = math.sqrt(error_x*error_x + error_y*error_y)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡πÜ 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        if iteration % 25 == 0:
            progress = min(100, (current_distance / distance) * 100) if distance > 0 else 100
            # print(f"   üìä {current_distance:.3f}m/{distance:.3f}m ({progress:.1f}%) error:{total_error:.3f}m")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if total_error < tolerance:
            stable_iterations += 1
            if stable_iterations >= 30:
                print("‚úÖ ‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
                break
        else:
            stable_iterations = 0
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì PID output ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏Å‡∏ô
        pid_output_x, _, _, _, _, _ = move_pid_x.compute(target_x, latest_chassis_position[0])
        pid_output_y, _, _, _, _, _ = move_pid_y.compute(target_y, latest_chassis_position[1])
        
        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        max_speed = 0.8  # m/s
        speed_x = max(-max_speed, min(max_speed, pid_output_x))
        speed_y = max(-max_speed, min(max_speed, pid_output_y))
        
        # ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà (‡∏™‡πÑ‡∏•‡∏î‡πå - ‡πÑ‡∏°‡πà‡∏´‡∏°‡∏∏‡∏ô)
        ep_chassis.drive_speed(x=speed_x, y=speed_y, z=0)
        time.sleep(0.05)
    
    # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
    ep_chassis.drive_speed(x=0, y=0, z=0)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
    final_dx = latest_chassis_position[0] - start_pos[0]
    final_dy = latest_chassis_position[1] - start_pos[1]
    final_distance = math.sqrt(final_dx*final_dx + final_dy*final_dy)
    
    print(f"‚úÖ ‡∏™‡πÑ‡∏•‡∏î‡πå‡πÄ‡∏™‡∏£‡πá‡∏à {final_distance:.3f}m")
    print(f"üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: ({latest_chassis_position[0]:.3f}, {latest_chassis_position[1]:.3f})")
    
    time.sleep(0.2)
    return final_distance

def move_direction_pid_with_emergency_brake(ep_chassis, direction, distance):
    """
    ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏î‡πâ‡∏ß‡∏¢ PID control (‡πÑ‡∏°‡πà‡∏´‡∏°‡∏∏‡∏ô‡∏ï‡∏±‡∏ß - ‡∏™‡πÑ‡∏•‡∏î‡πå)
    ‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏±‡∏ô‡∏ä‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô: ‡∏ñ‡πâ‡∏≤ filtered_distance < 250mm ‡∏à‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    """
    global move_pid_x, move_pid_y, latest_chassis_position
    from controler.movement_slide import filtered_distance

    direction_map = {
        'x+': {'x': 1, 'y': 0, 'name': '‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ (x+)'},
        'x-': {'x': -1, 'y': 0, 'name': '‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á (x-)'},
        'y+': {'x': 0, 'y': 1, 'name': '‡∏Ç‡∏ß‡∏≤ (y+)'},
        'y-': {'x': 0, 'y': -1, 'name': '‡∏ã‡πâ‡∏≤‡∏¢ (y-)'}
    }

    if direction not in direction_map:
        print(f"‚ùå ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {direction}")
        return 0

    dir_info = direction_map[direction]
    print(f"üö∂ ‡∏™‡πÑ‡∏•‡∏î‡πå{dir_info['name']} {distance:.3f}m")

    if move_pid_x is None:
        move_pid_x = PID(kp=2.0, ki=0.01, kd=0)
    if move_pid_y is None:
        move_pid_y = PID(kp=2.0, ki=0.01, kd=0)

    move_pid_x.reset()
    move_pid_y.reset()

    start_pos = list(latest_chassis_position)
    target_x = start_pos[0] + (distance * dir_info['x'])
    target_y = start_pos[1] + (distance * dir_info['y'])

    tolerance = 0.05
    stable_iterations = 0
    max_iterations = 50
    iteration = 0

    print(f"üìç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà: ({start_pos[0]:.3f}, {start_pos[1]:.3f})")
    print(f"üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ({target_x:.3f}, {target_y:.3f})")

    while iteration < max_iterations:
        iteration += 1

        # Emergency brake: ‡∏ñ‡πâ‡∏≤ ToF < 300mm ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        if filtered_distance[0] < 300:
            print("üõë Emergency Brake! ToF < 250mm")
            ep_chassis.drive_speed(x=0, y=0, z=0)
            ep_chassis.drive_speed(x=0, y=0, z=0)
            ep_chassis.drive_speed(x=0, y=0, z=0)
            ep_chassis.drive_speed(x=0, y=0, z=0)
            ep_chassis.drive_speed(x=0, y=0, z=0)
            ep_chassis.drive_speed(x=0, y=0, z=0)
            ep_chassis.drive_speed(x=0, y=0, z=0)
            ep_chassis.drive_speed(x=0, y=0, z=0)
            break

        dx = latest_chassis_position[0] - start_pos[0]
        dy = latest_chassis_position[1] - start_pos[1]
        current_distance = math.sqrt(dx*dx + dy*dy)

        error_x = target_x - latest_chassis_position[0]
        error_y = target_y - latest_chassis_position[1]
        total_error = math.sqrt(error_x*error_x + error_y*error_y)

        if total_error < tolerance:
            stable_iterations += 1
            if stable_iterations >= 30:
                print("‚úÖ ‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
                break
        else:
            stable_iterations = 0

        pid_output_x, *_ = move_pid_x.compute(target_x, latest_chassis_position[0])
        pid_output_y, *_ = move_pid_y.compute(target_y, latest_chassis_position[1])

        max_speed = 0.8
        speed_x = max(-max_speed, min(max_speed, pid_output_x))
        speed_y = max(-max_speed, min(max_speed, pid_output_y))

        ep_chassis.drive_speed(x=speed_x, y=speed_y, z=0)
        time.sleep(0.05)

    ep_chassis.drive_speed(x=0, y=0, z=0)

    final_dx = latest_chassis_position[0] - start_pos[0]
    final_dy = latest_chassis_position[1] - start_pos[1]
    final_distance = math.sqrt(final_dx*final_dx + final_dy*final_dy)

    print(f"‚úÖ ‡∏™‡πÑ‡∏•‡∏î‡πå‡πÄ‡∏™‡∏£‡πá‡∏à {final_distance:.3f}m")
    print(f"üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: ({latest_chassis_position[0]:.3f}, {latest_chassis_position[1]:.3f})")

    time.sleep(0.2)
    return final_distance

def move_direction_pid_wall(ep_chassis, direction, distance):
    """
    ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏î‡πâ‡∏ß‡∏¢ PID control ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≥‡πÅ‡∏û‡∏á
    
    Args:
        ep_chassis: chassis controller
        direction (str): ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà ('x+', 'x-', 'y+', 'y-')
        distance (float): ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà (‡πÄ‡∏°‡∏ï‡∏£)
    
    Returns:
        float: ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
    """
    global move_pid_x, move_pid_y, latest_chassis_position
    
    # ‡πÅ‡∏°‡∏õ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
    direction_map = {
        'x+': {'x': 1, 'y': 0, 'name': '‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ (x+)'},     # ‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
        'x-': {'x': -1, 'y': 0, 'name': '‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á (x-)'},    # ‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á
        'y+': {'x': 0, 'y': 1, 'name': '‡∏Ç‡∏ß‡∏≤ (y+)'},          # ‡πÑ‡∏õ‡∏Ç‡∏ß‡∏≤
        'y-': {'x': 0, 'y': -1, 'name': '‡∏ã‡πâ‡∏≤‡∏¢ (y-)'}         # ‡πÑ‡∏õ‡∏ã‡πâ‡∏≤‡∏¢
    }
    
    if direction not in direction_map:
        print(f"‚ùå ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {direction}")
        return 0
    
    dir_info = direction_map[direction]
    print(f"üîß ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á{dir_info['name']} {distance:.3f}m")
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô PID controllers
    if move_pid_x is None:
        move_pid_x = PID(kp=2.0*0.75, ki=0.01*0.75, kd=0.03*0.75)
    if move_pid_y is None:
        move_pid_y = PID(kp=2.0*0.75, ki=0.01*0.75, kd=0.03*0.75)
    
    # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï PID
    move_pid_x.reset()
    move_pid_y.reset()
    
    # **‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ list() ‡πÅ‡∏ó‡∏ô .copy()**
    start_pos = list(latest_chassis_position)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    target_x = start_pos[0] + (distance * dir_info['x'])
    target_y = start_pos[1] + (distance * dir_info['y'])
    
    tolerance = 0.05  # 5cm ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    stable_iterations = 0
    max_iterations = 200  # ‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô
    iteration = 0
    
    while iteration < max_iterations:
        iteration += 1
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì error ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏Å‡∏ô
        error_x = target_x - latest_chassis_position[0]
        error_y = target_y - latest_chassis_position[1]
        total_error = math.sqrt(error_x*error_x + error_y*error_y)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if total_error < tolerance:
            stable_iterations += 1
            if stable_iterations >= 45:
                print("‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à!")
                break
        else:
            stable_iterations = 0
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì PID output ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏Å‡∏ô
        pid_output_x, _, _, _, _, _ = move_pid_x.compute(target_x, latest_chassis_position[0])
        pid_output_y, _, _, _, _, _ = move_pid_y.compute(target_y, latest_chassis_position[1])
        
        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á)
        max_speed = 0.8  # m/s
        speed_x = max(-max_speed, min(max_speed, pid_output_x))
        speed_y = max(-max_speed, min(max_speed, pid_output_y))
        
        # ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà (‡∏™‡πÑ‡∏•‡∏î‡πå - ‡πÑ‡∏°‡πà‡∏´‡∏°‡∏∏‡∏ô)
        ep_chassis.drive_speed(x=speed_x, y=speed_y, z=0)
        time.sleep(0.05)
    
    # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
    ep_chassis.drive_speed(x=0, y=0, z=0)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
    final_dx = latest_chassis_position[0] - start_pos[0]
    final_dy = latest_chassis_position[1] - start_pos[1]
    final_distance = math.sqrt(final_dx*final_dx + final_dy*final_dy)
    
    print(f"‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à {final_distance:.3f}m")
    
    time.sleep(0.05)
    return final_distance

def move_forward_pid(ep_chassis, distance):
    """‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ (x+) ‡∏î‡πâ‡∏ß‡∏¢ PID"""
    return move_direction_pid(ep_chassis, 'x+', distance)

def move_back_pid(ep_chassis, distance):
    """‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á (x-) ‡∏î‡πâ‡∏ß‡∏¢ PID"""
    return move_direction_pid(ep_chassis, 'x-', distance)

def move_right_pid(ep_chassis, distance):
    """‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏Ç‡∏ß‡∏≤ (y+) ‡∏î‡πâ‡∏ß‡∏¢ PID"""
    return move_direction_pid(ep_chassis, 'y+', distance)

def move_left_pid(ep_chassis, distance):
    """‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏ã‡πâ‡∏≤‡∏¢ (y-) ‡∏î‡πâ‡∏ß‡∏¢ PID"""
    return move_direction_pid(ep_chassis, 'y-', distance)


def move_to_tile_center_from_walls(ep_chassis, way, marker, tof_wall, tile_size=0.6, ep_gimbal=None):
    """
    ‡∏£‡∏±‡∏ö way, marker, tof_wall (list 4 ‡∏ä‡πà‡∏≠‡∏á) ‡∏à‡∏≤‡∏Å move_gimbal
    ‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏ö‡∏•‡πá‡∏≠‡∏Å 0.6x0.6m ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ô‡∏±‡πâ‡∏ô
    ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏≤‡∏á‡πÅ‡∏Å‡∏ô ‡∏à‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏Å‡∏ô‡∏ô‡∏±‡πâ‡∏ô
    ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏•‡∏¢ ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏≤‡πÄ‡∏™‡∏≤
    """
    global latest_chassis_position

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô dict ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏¥‡∏®‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≥‡πÅ‡∏û‡∏á
    wall = {}
    dir_map = ['left', 'front', 'right', 'back']
    for i in range(4):
        if way[i] == 0 and tof_wall[i] is not None:
            wall[dir_map[i]] = tof_wall[i]

    wall_count = len(wall)
    if wall_count >= 2:
        # ‡∏õ‡∏Å‡∏ï‡∏¥: ‡πÉ‡∏ä‡πâ‡∏™‡∏π‡∏ï‡∏£‡πÄ‡∏î‡∏¥‡∏°
        x_now, y_now = latest_chassis_position[0], latest_chassis_position[1]
        min_x = x_now - tile_size/2
        max_x = x_now + tile_size/2
        min_y = (y_now - tile_size/2)
        max_y = (y_now + tile_size/2)

        if 'left' in wall:
            min_y = y_now - wall['left']#/1000
            max_y = min_y + tile_size
        elif 'right' in wall:
            max_y = y_now + wall['right']#/1000
            min_y = max_y - tile_size

        if 'front' in wall:
            max_x = x_now + wall['front']#/1000
            min_x = max_x - tile_size
        elif 'back' in wall:
            min_x = x_now - wall['back']#/1000
            max_x = min_x + tile_size

        center_x = (min_x + max_x) / 2
        center_y = (min_y + max_y) / 2

        print(f"üü¶ ‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï: x={min_x:.3f}~{max_x:.3f}, y={min_y:.3f}~{max_y:.3f}")
        print(f"üéØ ‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á: ({center_x:.3f}, {center_y:.3f})")
        print(f"üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ({x_now:.3f}, {y_now:.3f})")
        print(f"üîñ marker: {marker}")

        # ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏Å‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if ('front' in wall or 'back' in wall):
            move_direction_pid(ep_chassis, 'x+', center_x - x_now)
            correct_robot_orientation(ep_chassis, target_yaw=0)
        if ('left' in wall or 'right' in wall):
            move_direction_pid(ep_chassis, 'y+', center_y - y_now)
            correct_robot_orientation(ep_chassis, target_yaw=0)
    else:
        # ‡∏°‡∏µ‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏•‡∏¢: ‡∏´‡∏≤‡πÄ‡∏™‡∏≤
        wall_side = None
        for k in wall.keys():
            wall_side = k
        if ep_gimbal is not None:
            print("üîé ‡∏°‡∏µ‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏•‡∏¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏≤‡πÄ‡∏™‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á...")
            position = find_pillar_and_move_to_center(ep_chassis, ep_gimbal, way, tof_wall, tile_size)
            center_x = position[0]
            center_y = position[1]

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ!
            x_now, y_now = latest_chassis_position[0], latest_chassis_position[1]

            correct_robot_orientation(ep_chassis, target_yaw=0)
            move_to_center(ep_chassis, center_x, center_y, get_position_func=lambda: (latest_chassis_position[0], latest_chassis_position[1]))
            # move_direction_pid(ep_chassis, 'y+', center_y - y_now)
            correct_robot_orientation(ep_chassis, target_yaw=0)

        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡πÄ‡∏™‡∏≤‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á ep_gimbal ‡∏°‡∏≤)")
def sweep_angles_list(start, end, step):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏°‡∏∏‡∏° sweep ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏£‡∏ì‡∏µ start < end ‡πÅ‡∏•‡∏∞ start > end"""
    if start < end:
        return list(range(start, end + 1, step))
    else:
        return list(range(start, end - 1, -step))

def find_pillar_and_move_to_center(ep_chassis, ep_gimbal, way, tof_wall, tile_size=0.6):
    global latest_chassis_position

    if latest_chassis_position is None or len(latest_chassis_position) < 2:
        print(latest_chassis_position)
        raise ValueError("latest_chassis_position ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

    x_now, y_now = latest_chassis_position[0], latest_chassis_position[1]

    # [‡∏ã‡πâ‡∏≤‡∏¢‡∏ö‡∏ô, ‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô, ‡∏ã‡πâ‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏á, ‡∏Ç‡∏ß‡∏≤‡∏•‡πà‡∏≤‡∏á] (‡∏Å‡∏ß‡∏≤‡∏î‡∏ä‡πà‡∏ß‡∏á‡∏•‡∏∞ 90 ‡∏≠‡∏á‡∏®‡∏≤)
    sweep_map = [
        sweep_angles_list(-135-15, -45-15, 5),  # ‡∏ã‡πâ‡∏≤‡∏¢‡∏ö‡∏ô
        sweep_angles_list(45-15, 135-15, 5),    # ‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô
        sweep_angles_list(-135-15, -45-15, 5),  # ‡∏ã‡πâ‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏á
        sweep_angles_list(45-15, 135-15, 5),    # ‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô‡∏•‡πà‡∏≤‡∏á
    ]

    pillar_yaws = [None, None, None, None]
    pillar_ds = [None, None, None, None]

    skip = [False, False, False, False]
    if way[0] == 0:  # ‡∏°‡∏µ‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡∏ã‡πâ‡∏≤‡∏¢
        skip[0] = True
        skip[2] = True
    if way[2] == 0:  # ‡∏°‡∏µ‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡∏Ç‡∏ß‡∏≤
        skip[1] = True
        skip[3] = True
    if way[1] == 0:  # ‡∏°‡∏µ‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡∏´‡∏ô‡πâ‡∏≤
        skip[0] = True
        skip[1] = True
    if way[3] == 0:  # ‡∏°‡∏µ‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡∏´‡∏•‡∏±‡∏á
        skip[2] = True
        skip[3] = True

    for i in range(4):
        if skip[i]:
            print(f"üöß ‡∏Ç‡πâ‡∏≤‡∏° sweep {['‡∏ã‡πâ‡∏≤‡∏¢‡∏ö‡∏ô','‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô','‡∏ã‡πâ‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏á','‡∏Ç‡∏ß‡∏≤‡∏•‡πà‡∏≤‡∏á'][i]} ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ/‡∏ï‡∏¥‡∏î‡∏Å‡∏≥‡πÅ‡∏û‡∏á")
            continue
        readings = []
        for yaw in sweep_map[i]:
            ep_gimbal.moveto(pitch=-6, yaw=yaw, pitch_speed=350, yaw_speed=350).wait_for_completed()
            d = get_stable_distance_reading() / 1000  # m
            time.sleep(0.01)
            readings.append((d, yaw))
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 0.1-0.6m
        valid = [item for item in readings if 0.1 < item[0] < 0.5]
        if valid:
            min_d, min_yaw = min(valid, key=lambda x: x[0])
            pillar_yaws[i] = min_yaw
            pillar_ds[i] = min_d
        else:
            pillar_yaws[i] = None
            pillar_ds[i] = None

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï tile ‡∏ï‡∏≤‡∏°‡πÄ‡∏™‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡πÑ‡∏î‡πâ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    min_x = x_now - tile_size/2
    max_x = x_now + tile_size/2
    min_y = (y_now - tile_size/2)
    max_y = (y_now + tile_size/2)

    if way[0] == 0 and tof_wall[0] is not None:
        min_y = y_now - tof_wall[0]/1000
        max_y = min_y + tile_size
    elif pillar_ds[0] is not None:
        rad = math.radians(pillar_yaws[0])
        px = x_now + pillar_ds[0] * math.cos(rad)
        py = y_now + pillar_ds[0] * math.sin(rad)
        min_y = py
        max_y = min_y + tile_size

    if way[2] == 0 and tof_wall[2] is not None:
        max_y = y_now + tof_wall[2]/1000
        min_y = max_y - tile_size
    elif pillar_ds[2] is not None:
        rad = math.radians(pillar_yaws[2])
        px = x_now + pillar_ds[2] * math.cos(rad)
        py = y_now + pillar_ds[2] * math.sin(rad)
        max_y = py
        min_y = max_y - tile_size

    if way[1] == 0 and tof_wall[1] is not None:
        max_x = x_now + tof_wall[1]/1000
        min_x = max_x - tile_size
    elif pillar_ds[1] is not None:
        rad = math.radians(pillar_yaws[1])
        px = x_now + pillar_ds[1] * math.cos(rad)
        py = y_now + pillar_ds[1] * math.sin(rad)
        max_x = px
        min_x = max_x - tile_size

    if way[3] == 0 and tof_wall[3] is not None:
        min_x = x_now - tof_wall[3]/1000
        max_x = min_x + tile_size
    elif pillar_ds[3] is not None:
        rad = math.radians(pillar_yaws[3])
        px = x_now + pillar_ds[3] * math.cos(rad)
        py = y_now + pillar_ds[3] * math.sin(rad)
        min_x = px
        max_x = min_x + tile_size

    center_x = (min_x + max_x) / 2
    center_y = (min_y + max_y) / 2

    print(f"üü¶ Pillar min/max: x={min_x:.3f}~{max_x:.3f}, y={min_y:.3f}~{max_y:.3f}")
    print(f"üéØ Pillar center: ({center_x:.3f}, {center_y:.3f})")

    return (center_x, center_y)

# def get_stable_distance_reading():
#     """
#     ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÅ‡∏ö‡∏ö stable ‡πÇ‡∏î‡∏¢‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
#     Returns:
#         float: ‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà stable
#     """
#     global lastest_distance  # <--- ‡πÅ‡∏Å‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà median filter update
#     stable_readings = []
#     for i in range(5):
#         stable_readings.append(lastest_distance[0])
#         time.sleep(0.02)
#     stable_value = statistics.median(stable_readings)
#     variance = max(stable_readings) - min(stable_readings)
#     if variance > 100:
#         print(f"‚ö†Ô∏è  ToF ‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£: variance={variance:.0f}mm, readings={stable_readings}")
#     return stable_value


def move_to_center(ep_chassis, target_x, target_y, get_position_func, tolerance=0.05, max_time=5.0):
    """
    ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á (target_x, target_y) ‡∏ó‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏î‡πâ‡∏ß‡∏¢ PID 2 ‡πÅ‡∏Å‡∏ô
    get_position_func: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (x, y)
    """
    global move_pid_x, move_pid_y

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á PID ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    if move_pid_x is None:
        move_pid_x = PID(kp=2.0*0.6, ki=0.01*0.6, kd=0)
    if move_pid_y is None:
        move_pid_y = PID(kp=2.0*0.6, ki=0.01*0.6, kd=0)

    move_pid_x.reset()
    move_pid_y.reset()

    start_time = time.time()
    stable_count = 0

    while True:
        x_now, y_now = latest_chassis_position[0], latest_chassis_position[1]
        error_x = target_x - x_now
        error_y = target_y - y_now
        dist = math.hypot(error_x, error_y)

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì PID output
        pid_output_x, *_ = move_pid_x.compute(target_x, x_now)
        pid_output_y, *_ = move_pid_y.compute(target_y, y_now)

        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
        max_speed = 0.8
        speed_x = max(-max_speed, min(max_speed, pid_output_x))
        speed_y = max(-max_speed, min(max_speed, pid_output_y))

        ep_chassis.drive_speed(x=speed_x, y=speed_y, z=0)

        if dist < tolerance:
            stable_count += 1
            if stable_count > 50:
                break
        else:
            stable_count = 0

        if time.time() - start_time > max_time:
            break
        time.sleep(0.05)
    correct_robot_orientation(ep_chassis, target_yaw=0)
    ep_chassis.drive_speed(x=0, y=0, z=0)
    correct_robot_orientation(ep_chassis, target_yaw=0)