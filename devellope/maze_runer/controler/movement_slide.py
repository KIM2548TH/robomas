# -*-coding:utf-8-*-

import time
import math
from .pid import PID, TurnPID

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ global ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PID ‡πÅ‡∏•‡∏∞ tracking
latest_chassis_position = [0, 0, 0]
latest_chassis_attitude = [0, 0, 0]  # **‡πÄ‡∏û‡∏¥‡πà‡∏°: [yaw, pitch, roll]**
move_pid_x = None
move_pid_y = None
turn_pid = None  # **‡πÄ‡∏û‡∏¥‡πà‡∏°: PID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô**

def sub_chassis_position(position_info):
    """Callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á chassis"""
    global latest_chassis_position
    # **‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô list ‡πÄ‡∏™‡∏°‡∏≠**
    latest_chassis_position = list(position_info)

def sub_chassis_attitude(attitude_info):
    """Callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á chassis (yaw, pitch, roll)"""
    global latest_chassis_attitude
    # **‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô list ‡πÄ‡∏™‡∏°‡∏≠**
    latest_chassis_attitude = list(attitude_info)

def correct_robot_orientation(ep_chassis, target_yaw=0):
    """
    ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏´‡∏±‡∏ô‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    
    Args:
        ep_chassis: chassis controller
        target_yaw (float): ‡∏°‡∏∏‡∏° yaw ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (‡∏≠‡∏á‡∏®‡∏≤)
    """
    global turn_pid, latest_chassis_attitude
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô PID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô
    if turn_pid is None:
        turn_pid = TurnPID(kp=2.0, ki=0.01, kd=0.03)
    
    turn_pid.reset()
    
    current_yaw = latest_chassis_attitude[0]
    yaw_error = target_yaw - current_yaw
    
    # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á -180 ‡∏ñ‡∏∂‡∏á 180
    while yaw_error > 180:
        yaw_error -= 360
    while yaw_error < -180:
        yaw_error += 360
    
    print(f"üß≠ ‡∏õ‡∏£‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á: ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô {current_yaw:.1f}¬∞ -> ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ {target_yaw:.1f}¬∞ (‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏°‡∏∏‡∏ô {yaw_error:.1f}¬∞)")
    
    # ‡∏ñ‡πâ‡∏≤‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏≠‡∏á‡∏®‡∏≤ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö
    if abs(yaw_error) < 0.1:
        print("‚úÖ ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß")
        return
    
    tolerance = 0.1  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ
    stable_count = 0
    max_iterations = 50
    iteration = 0
    
    while iteration < max_iterations:
        iteration += 1
        
        current_yaw = latest_chassis_attitude[0]
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì PID output
        turn_output, angle_error, p, i, d = turn_pid.compute(target_yaw, current_yaw)
        
        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô
        max_turn_speed = 200  # ‡∏≠‡∏á‡∏®‡∏≤/‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        turn_speed = max(-max_turn_speed, min(max_turn_speed, turn_output))
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        if iteration % 10 == 0:
            print(f"   üîÑ ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_yaw:.1f}¬∞ ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {angle_error:.1f}¬∞ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß: {turn_speed:.1f}¬∞/s")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß
        if abs(angle_error) < tolerance:
            stable_count += 1
            if stable_count >= 10:
                print("‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à!")
                break
        else:
            stable_count = 0
        
        # ‡∏™‡∏±‡πà‡∏á‡∏´‡∏°‡∏∏‡∏ô chassis
        ep_chassis.drive_speed(x=0, y=0, z=turn_speed)
        time.sleep(0.01)
    
    # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô
    ep_chassis.drive_speed(x=0, y=0, z=0)
    time.sleep(0.1)

def move_direction_pid(ep_chassis, direction, distance):
    """
    ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏î‡πâ‡∏ß‡∏¢ PID control (‡πÑ‡∏°‡πà‡∏´‡∏°‡∏∏‡∏ô‡∏ï‡∏±‡∏ß - ‡∏™‡πÑ‡∏•‡∏î‡πå)
    
    Args:
        ep_chassis: chassis controller
        direction (str): ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà ('x+', 'x-', 'y+', 'y-')
        distance (float): ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà (‡πÄ‡∏°‡∏ï‡∏£)
    
    Returns:
        float: ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
    """
    global move_pid_x, move_pid_y, latest_chassis_position
    
    # ‡πÅ‡∏°‡∏õ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
    direction_map = {
        'x+': {'x': 1, 'y': 0, 'name': '‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ (x+)'},     # ‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
        'x-': {'x': -1, 'y': 0, 'name': '‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á (x-)'},    # ‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á
        'y+': {'x': 0, 'y': 1, 'name': '‡∏Ç‡∏ß‡∏≤ (y+)'},          # ‡πÑ‡∏õ‡∏Ç‡∏ß‡∏≤
        'y-': {'x': 0, 'y': -1, 'name': '‡∏ã‡πâ‡∏≤‡∏¢ (y-)'}         # ‡πÑ‡∏õ‡∏ã‡πâ‡∏≤‡∏¢
    }
    
    if direction not in direction_map:
        print(f"‚ùå ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {direction}")
        return 0
    
    dir_info = direction_map[direction]
    print(f"üö∂ ‡∏™‡πÑ‡∏•‡∏î‡πå{dir_info['name']} {distance:.3f}m")
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô PID controllers
    if move_pid_x is None:
        move_pid_x = PID(kp=2.0, ki=0.01, kd=0.003)
    if move_pid_y is None:
        move_pid_y = PID(kp=2.0, ki=0.01, kd=0.003)
    
    # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï PID
    move_pid_x.reset()
    move_pid_y.reset()
    
    # **‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ list() ‡πÅ‡∏ó‡∏ô .copy()**
    start_pos = list(latest_chassis_position)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    target_x = start_pos[0] + (distance * dir_info['x'])
    target_y = start_pos[1] + (distance * dir_info['y'])
    
    tolerance = 0.01  # 1cm
    stable_iterations = 0
    max_iterations = 200
    iteration = 0
    
    print(f"üìç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà: ({start_pos[0]:.3f}, {start_pos[1]:.3f})")
    print(f"üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ({target_x:.3f}, {target_y:.3f})")
    
    while iteration < max_iterations:
        iteration += 1
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        dx = latest_chassis_position[0] - start_pos[0]
        dy = latest_chassis_position[1] - start_pos[1]
        current_distance = math.sqrt(dx*dx + dy*dy)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì error ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏Å‡∏ô
        error_x = target_x - latest_chassis_position[0]
        error_y = target_y - latest_chassis_position[1]
        total_error = math.sqrt(error_x*error_x + error_y*error_y)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡πÜ 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        if iteration % 25 == 0:
            progress = min(100, (current_distance / distance) * 100) if distance > 0 else 100
            print(f"   üìä {current_distance:.3f}m/{distance:.3f}m ({progress:.1f}%) error:{total_error:.3f}m")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if total_error < tolerance:
            stable_iterations += 1
            if stable_iterations >= 30:
                print("‚úÖ ‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
                break
        else:
            stable_iterations = 0
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì PID output ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏Å‡∏ô
        pid_output_x, _, _, _, _, _ = move_pid_x.compute(target_x, latest_chassis_position[0])
        pid_output_y, _, _, _, _, _ = move_pid_y.compute(target_y, latest_chassis_position[1])
        
        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        max_speed = 0.8  # m/s
        speed_x = max(-max_speed, min(max_speed, pid_output_x))
        speed_y = max(-max_speed, min(max_speed, pid_output_y))
        
        # ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà (‡∏™‡πÑ‡∏•‡∏î‡πå - ‡πÑ‡∏°‡πà‡∏´‡∏°‡∏∏‡∏ô)
        ep_chassis.drive_speed(x=speed_x, y=speed_y, z=0)
        time.sleep(0.05)
    
    # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
    ep_chassis.drive_speed(x=0, y=0, z=0)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
    final_dx = latest_chassis_position[0] - start_pos[0]
    final_dy = latest_chassis_position[1] - start_pos[1]
    final_distance = math.sqrt(final_dx*final_dx + final_dy*final_dy)
    
    print(f"‚úÖ ‡∏™‡πÑ‡∏•‡∏î‡πå‡πÄ‡∏™‡∏£‡πá‡∏à {final_distance:.3f}m")
    print(f"üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: ({latest_chassis_position[0]:.3f}, {latest_chassis_position[1]:.3f})")
    
    time.sleep(0.2)
    return final_distance

def move_direction_pid_wall(ep_chassis, direction, distance):
    """
    ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏î‡πâ‡∏ß‡∏¢ PID control ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≥‡πÅ‡∏û‡∏á
    
    Args:
        ep_chassis: chassis controller
        direction (str): ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà ('x+', 'x-', 'y+', 'y-')
        distance (float): ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà (‡πÄ‡∏°‡∏ï‡∏£)
    
    Returns:
        float: ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
    """
    global move_pid_x, move_pid_y, latest_chassis_position
    
    # ‡πÅ‡∏°‡∏õ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
    direction_map = {
        'x+': {'x': 1, 'y': 0, 'name': '‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ (x+)'},     # ‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
        'x-': {'x': -1, 'y': 0, 'name': '‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á (x-)'},    # ‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á
        'y+': {'x': 0, 'y': 1, 'name': '‡∏Ç‡∏ß‡∏≤ (y+)'},          # ‡πÑ‡∏õ‡∏Ç‡∏ß‡∏≤
        'y-': {'x': 0, 'y': -1, 'name': '‡∏ã‡πâ‡∏≤‡∏¢ (y-)'}         # ‡πÑ‡∏õ‡∏ã‡πâ‡∏≤‡∏¢
    }
    
    if direction not in direction_map:
        print(f"‚ùå ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {direction}")
        return 0
    
    dir_info = direction_map[direction]
    print(f"üîß ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á{dir_info['name']} {distance:.3f}m")
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô PID controllers
    if move_pid_x is None:
        move_pid_x = PID(kp=2.0, ki=0.01, kd=0.003)
    if move_pid_y is None:
        move_pid_y = PID(kp=2.0, ki=0.01, kd=0.003)
    
    # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï PID
    move_pid_x.reset()
    move_pid_y.reset()
    
    # **‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ list() ‡πÅ‡∏ó‡∏ô .copy()**
    start_pos = list(latest_chassis_position)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    target_x = start_pos[0] + (distance * dir_info['x'])
    target_y = start_pos[1] + (distance * dir_info['y'])
    
    tolerance = 0.05  # 5cm ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    stable_iterations = 0
    max_iterations = 200  # ‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô
    iteration = 0
    
    while iteration < max_iterations:
        iteration += 1
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì error ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏Å‡∏ô
        error_x = target_x - latest_chassis_position[0]
        error_y = target_y - latest_chassis_position[1]
        total_error = math.sqrt(error_x*error_x + error_y*error_y)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if total_error < tolerance:
            stable_iterations += 1
            if stable_iterations >= 45:
                print("‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à!")
                break
        else:
            stable_iterations = 0
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì PID output ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏Å‡∏ô
        pid_output_x, _, _, _, _, _ = move_pid_x.compute(target_x, latest_chassis_position[0])
        pid_output_y, _, _, _, _, _ = move_pid_y.compute(target_y, latest_chassis_position[1])
        
        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á)
        max_speed = 0.8  # m/s
        speed_x = max(-max_speed, min(max_speed, pid_output_x))
        speed_y = max(-max_speed, min(max_speed, pid_output_y))
        
        # ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà (‡∏™‡πÑ‡∏•‡∏î‡πå - ‡πÑ‡∏°‡πà‡∏´‡∏°‡∏∏‡∏ô)
        ep_chassis.drive_speed(x=speed_x, y=speed_y, z=0)
        time.sleep(0.05)
    
    # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
    ep_chassis.drive_speed(x=0, y=0, z=0)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
    final_dx = latest_chassis_position[0] - start_pos[0]
    final_dy = latest_chassis_position[1] - start_pos[1]
    final_distance = math.sqrt(final_dx*final_dx + final_dy*final_dy)
    
    print(f"‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à {final_distance:.3f}m")
    
    time.sleep(0.05)
    return final_distance

def move_forward_pid(ep_chassis, distance):
    """‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ (x+) ‡∏î‡πâ‡∏ß‡∏¢ PID"""
    return move_direction_pid(ep_chassis, 'x+', distance)

def move_back_pid(ep_chassis, distance):
    """‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á (x-) ‡∏î‡πâ‡∏ß‡∏¢ PID"""
    return move_direction_pid(ep_chassis, 'x-', distance)

def move_right_pid(ep_chassis, distance):
    """‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏Ç‡∏ß‡∏≤ (y+) ‡∏î‡πâ‡∏ß‡∏¢ PID"""
    return move_direction_pid(ep_chassis, 'y+', distance)

def move_left_pid(ep_chassis, distance):
    """‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏ã‡πâ‡∏≤‡∏¢ (y-) ‡∏î‡πâ‡∏ß‡∏¢ PID"""
    return move_direction_pid(ep_chassis, 'y-', distance)


def move_to_tile_center_from_walls(ep_chassis, way, marker, tof_wall, tile_size=0.6):
    """
    ‡∏£‡∏±‡∏ö way, marker, tof_wall (list 4 ‡∏ä‡πà‡∏≠‡∏á) ‡∏à‡∏≤‡∏Å move_gimbal
    ‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏ö‡∏•‡πá‡∏≠‡∏Å 0.6x0.6m ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ô‡∏±‡πâ‡∏ô
    ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏≤‡∏á‡πÅ‡∏Å‡∏ô ‡∏à‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏Å‡∏ô‡∏ô‡∏±‡πâ‡∏ô
    """
    global latest_chassis_position

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô dict ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏¥‡∏®‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≥‡πÅ‡∏û‡∏á
    wall = {}
    dir_map = ['left', 'front', 'right', 'back']
    for i in range(4):
        if way[i] == 0 and tof_wall[i] is not None:
            wall[dir_map[i]] = tof_wall[i]

    # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    x_now, y_now = latest_chassis_position[0], latest_chassis_position[1]

    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (¬± tile_size/2)
    min_x = (x_now - tile_size/2)+0.10
    max_x = (x_now + tile_size/2)-0.10
    min_y = (y_now - tile_size/2)
    max_y = (y_now + tile_size/2)

    # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏ï‡∏≤‡∏° ToF ‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ (‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
    if 'left' in wall:
        min_y = y_now - wall['left']
        max_y = min_y + tile_size
    elif 'right' in wall:
        max_y = y_now + wall['right']
        min_y = max_y - tile_size

    if 'front' in wall:
        max_x = x_now + wall['front']
        min_x = max_x - tile_size
    elif 'back' in wall:
        min_x = x_now - wall['back']
        max_x = min_x + tile_size

    # ‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏ö‡∏•‡πá‡∏≠‡∏Å
    center_x = (min_x + max_x) / 2
    center_y = (min_y + max_y) / 2

    print(f"üü¶ ‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï: x={min_x:.3f}~{max_x:.3f}, y={min_y:.3f}~{max_y:.3f}")
    print(f"üéØ ‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á: ({center_x:.3f}, {center_y:.3f})")
    print(f"üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ({x_now:.3f}, {y_now:.3f})")
    print(f"üîñ marker: {marker}")

    # ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏Å‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if ('front' in wall or 'back' in wall):
        move_direction_pid(ep_chassis, 'x+', center_x - x_now)
    if ('left' in wall or 'right' in wall):
        move_direction_pid(ep_chassis, 'y+', center_y - y_now)