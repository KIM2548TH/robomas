# -*-coding:utf-8-*-
import robomaster
from robomaster import robot
import time
import math
import csv
from collections import deque
import os
from .pid import PID, TurnPID

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• subscription
current_pos = [0, 0, 0]
current_attitude = [0, 0, 0]  # [pitch, roll, yaw]
position_history = deque(maxlen=100)
attitude_history = deque(maxlen=50)
movement_stats = {
    'distance_moved': 0,
    'speed': 0,
    'stable_count': 0,
    'last_update': time.time()
}

# **‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô**
wall_detection_stats = {
    'last_position': None,
    'movement_attempts': 0,
    'blocked_directions': set(),
    'detection_threshold': 0.05,  # ‡∏´‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 5cm ‡πÉ‡∏ô 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ = ‡∏ï‡∏¥‡∏î‡∏Å‡∏≥‡πÅ‡∏û‡∏á
    'time_threshold': 1.0
}

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏£‡∏∞‡∏ö‡∏ö
ep_robot = None
ep_chassis = None
move_pid = None
turn_pid_controller = None
move_writer = None
turn_writer = None
move_file = None
turn_file = None
move_distance = 0.5

# **‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏£‡∏∞‡∏ö‡∏ö calibration ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á**
orientation_calibration = {
    'is_calibrated': False,
    'initial_yaw': 0,  # ‡∏°‡∏∏‡∏° yaw ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    'initial_direction': 'y+',  # ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    'direction_offset': 0  # offset ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á yaw ‡∏Å‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á
}

# ===== SUBSCRIPTION HANDLERS =====

def sub_position_handler(position_info):
    """Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö subscription ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á"""
    global current_pos, position_history, movement_stats
    
    x, y, z = position_info
    prev_pos = current_pos.copy()
    current_pos[:] = [x, y, z]
    
    if len(position_history) > 0:
        last_pos = position_history[-1]
        distance_delta = math.sqrt(
            (x - last_pos['x'])**2 + 
            (y - last_pos['y'])**2
        )
        movement_stats['distance_moved'] += distance_delta
        
        time_delta = time.time() - last_pos['time']
        if time_delta > 0:
            movement_stats['speed'] = distance_delta / time_delta
        
        if distance_delta < 0.001:
            movement_stats['stable_count'] += 1
        else:
            movement_stats['stable_count'] = 0
    
    position_history.append({
        'time': time.time(),
        'x': x, 'y': y, 'z': z
    })
    
    movement_stats['last_update'] = time.time()

def sub_attitude_handler(attitude_info):
    """Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö subscription ‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á"""
    global current_attitude, attitude_history
    
    yaw, pitch, roll = attitude_info
    current_attitude[:] = [pitch, roll, yaw]
    
    attitude_history.append({
        'time': time.time(),
        'yaw': yaw, 'pitch': pitch, 'roll': roll
    })





# ===== CORE MOVEMENT FUNCTIONS =====

def move_forward(distance=None):
    """‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
    global move_distance, movement_stats, position_history
    
    target_distance = distance if distance is not None else move_distance
    
    print(f"üö∂ ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ {target_distance:.2f}m")
    
    # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï PID ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    move_pid.reset()
    movement_stats = {
        'distance_moved': 0, 'speed': 0, 'stable_count': 0,
        'last_update': time.time()
    }
    position_history.clear()
    
    start_pos = current_pos.copy()
    tolerance = 0.01
    stable_iterations = 0
    last_progress_time = time.time()
    
    print(f"üìç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà: ({start_pos[0]:.3f}, {start_pos[1]:.3f})")
    
    while True:
        dx = current_pos[0] - start_pos[0]
        dy = current_pos[1] - start_pos[1]
        current_distance = math.sqrt(dx*dx + dy*dy)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        current_time = time.time()
        if current_time - last_progress_time >= 0.5:
            progress = min(100, (current_distance / target_distance) * 100)
            # print(f"   üìä {current_distance:.3f}m/{target_distance:.2f}m ({progress:.1f}%) "
                #   f"‡πÄ‡∏£‡πá‡∏ß:{movement_stats['speed']:.3f}m/s")
            last_progress_time = current_time
        
        error_current = target_distance - current_distance
        
        if abs(error_current) < tolerance:
            stable_iterations += 1
            if stable_iterations >= 30:
                break
        else:
            stable_iterations = 0
        
        if movement_stats['stable_count'] > 100:
            print("‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏Ç‡∏±‡∏î - ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà")
            break
        
        pid_output, p, i, d, e, t = move_pid.compute(target_distance, current_distance)
        speed = pid_output
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if move_writer:
            move_writer.writerow([
                current_pos[0], current_pos[1], p, i, d, pid_output, e, t,
                movement_stats['speed'], movement_stats['stable_count'], current_distance
            ])
        
        ep_chassis.drive_speed(x=speed, y=0, z=0)
        time.sleep(0.02)
    
    ep_chassis.drive_speed(x=0, y=0, z=0)
    final_distance = math.sqrt(
        (current_pos[0] - start_pos[0])**2 + 
        (current_pos[1] - start_pos[1])**2
    )
    print(f"‚úÖ ‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à {final_distance:.3f}m")
    time.sleep(0.2)
    return final_distance

def turn_right(angle=90):
    """‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤‡∏ï‡∏≤‡∏°‡∏°‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
    return _turn("right", angle)

def turn_left(angle=90):
    """‡∏´‡∏°‡∏∏‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏°‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
    return _turn("left", angle)

def _turn(direction, angle):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏°‡∏∏‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    global current_attitude, attitude_history
    
    if direction.lower() == "right":
        print(f"‚Ü™Ô∏è ‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤ {angle}¬∞")
        angle_multiplier = 1
    elif direction.lower() == "left":
        print(f"‚Ü©Ô∏è ‡∏´‡∏°‡∏∏‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ {angle}¬∞")
        angle_multiplier = -1
    else:
        print("‚ùå ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!")
        return
    
    # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï PID
    turn_pid_controller.reset()
    attitude_history.clear()
    
    time.sleep(0.3)
    start_yaw = current_attitude[2]
    target_yaw = start_yaw + (angle * angle_multiplier)
    
    # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ yaw ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á -180 ‡∏ñ‡∏∂‡∏á 180
    if target_yaw < -180: 
        target_yaw += 360
    elif target_yaw > 180: 
        target_yaw -= 360
    
    print(f"üéØ ‡∏°‡∏∏‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {start_yaw:.2f}¬∞, ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: {target_yaw:.2f}¬∞")
    
    tolerance = 0.5
    stable_count = 0
    last_display_time = time.time()
    
    while True:
        current_yaw = current_attitude[2]
        
        pid_output, angle_error, p, i, d = turn_pid_controller.compute(target_yaw, current_yaw)
        turn_speed = pid_output
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        current_time = time.time()
        if current_time - last_display_time >= 0.2:
            # print(f"   üîÑ ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_yaw:.1f}¬∞ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: {target_yaw:.1f}¬∞ "
                #   f"‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {angle_error:.1f}¬∞")
            last_display_time = current_time
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if turn_writer:
            turn_writer.writerow([time.time(), current_yaw, target_yaw, angle_error, p, i, d, pid_output])
        
        if abs(angle_error) < tolerance:
            stable_count += 1
            if stable_count >= 15:
                break
        else:
            stable_count = 0
        
        ep_chassis.drive_speed(x=0, y=0, z=turn_speed)
        time.sleep(0.02)
    
    ep_chassis.drive_speed(x=0, y=0, z=0)
    time.sleep(0.5)
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
    end_yaw = current_attitude[2]
    actual_change = end_yaw - start_yaw
    
    if actual_change > 180: 
        actual_change -= 360
    elif actual_change < -180: 
        actual_change += 360
    
    expected_change = angle * angle_multiplier
    error_from_target = abs(actual_change - expected_change)
    
    print(f"üéØ ‡∏°‡∏∏‡∏°‡∏´‡∏•‡∏±‡∏á‡∏´‡∏°‡∏∏‡∏ô: {end_yaw:.2f}¬∞")
    print(f"üìè ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏£‡∏¥‡∏á: {actual_change:.2f}¬∞")
    print(f"üìè ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô: {error_from_target:.2f}¬∞")
    print("‚úÖ ‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

# ===== UTILITY FUNCTIONS =====

def get_current_position():
    """‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    return current_pos[0], current_pos[1]

def get_current_orientation():
    """‡∏î‡∏∂‡∏á‡∏°‡∏∏‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (yaw)"""
    return current_attitude[2]

def get_movement_stats():
    """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà"""
    return movement_stats.copy()

def set_move_distance(distance):
    """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"""
    global move_distance
    move_distance = distance
    print(f"üìè ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {distance}m")

# ===== INITIALIZATION =====

def calibrate_initial_orientation(facing_direction='x+'):
    """
    Calibrate ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå
    
    Args:
        facing_direction (str): ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ ('x+', 'x-', 'y+', 'y-')
    """
    global orientation_calibration
    
    current_yaw = current_attitude[2]
    
    # ‡πÅ‡∏°‡∏õ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏Å‡∏±‡∏ö‡∏°‡∏∏‡∏° - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö main.py
    direction_to_angle = {
        'x+': 0,    # ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)
        'y-': 90,   # ‡πÉ‡∏ï‡πâ
        'x-': 180,  # ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å
        'y+': -90   # ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠
    }
    
    expected_angle = direction_to_angle.get(facing_direction, 0)
    offset = expected_angle - current_yaw
    
    # ‡∏õ‡∏£‡∏±‡∏ö offset ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á -180 ‡∏ñ‡∏∂‡∏á 180
    while offset > 180:
        offset -= 360
    while offset < -180:
        offset += 360
    
    orientation_calibration = {
        'is_calibrated': True,
        'initial_yaw': current_yaw,
        'initial_direction': facing_direction,
        'direction_offset': offset
    }
    
    print(f"üß≠ Calibrate ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á:")
    print(f"   - Yaw ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_yaw:.1f}¬∞")
    print(f"   - ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á: {facing_direction}")
    print(f"   - ‡∏°‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á: {expected_angle}¬∞")
    print(f"   - Offset: {offset:.1f}¬∞")
    print("‚úÖ Calibration ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")





def init_movement_system():
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà"""
    global ep_robot, ep_chassis, move_pid, turn_pid_controller
    global current_pos, current_attitude, move_writer, turn_writer
    global move_file, turn_file, move_distance
    
    print("ü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà...")
    
    ep_robot = robot.Robot()
    ep_robot.initialize(conn_type="ap")
    ep_chassis = ep_robot.chassis

    print("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LED...")
    ep_robot.led.set_led(comp="all", r=255, g=255, b=255, effect="scrolling")
    time.sleep(1) 

    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô PID
    move_pid = PID(kp=2, ki=0.01, kd=0.03) 
    turn_pid_controller = TurnPID(kp=5, ki=0, kd=0.5)

    move_distance = 0.5
    current_pos = [0, 0, 0]
    current_attitude = [0, 0, 0]

    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ subscription
    print("üì° ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ subscription...")
    ep_chassis.sub_position(freq=50, callback=sub_position_handler)
    ep_chassis.sub_attitude(freq=20, callback=sub_attitude_handler)
    
    time.sleep(2)
    
    print(f"üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ({current_pos[0]:.3f}, {current_pos[1]:.3f})")
    print(f"üß≠ ‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: yaw {current_attitude[2]:.1f}¬∞")
    
    # **‡πÄ‡∏û‡∏¥‡πà‡∏°: Calibrate ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô**
    print("\nüß≠ ‡∏Å‡∏≥‡∏•‡∏±‡∏á calibrate ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô...")
    calibrate_initial_orientation('x+')  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ x+ (‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å) ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö main.py
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå log
    output_dir = "csv_pid"
    os.makedirs(output_dir, exist_ok=True)
    
    move_log_filename = os.path.join(output_dir, "movement_log.csv")
    turn_log_filename = os.path.join(output_dir, "turn_log.csv")
    
    move_file = open(move_log_filename, mode='w', newline='')
    turn_file = open(turn_log_filename, mode='w', newline='')
    
    move_writer = csv.writer(move_file)
    turn_writer = csv.writer(turn_file)
    
    move_writer.writerow([
        "x", "y", "p", "i", "d", "pid_output", "error", "time",
        "speed", "stability", "distance"
    ])
    turn_writer.writerow([
        "timestamp", "current_yaw", "target_yaw", "angle_error", 
        "p_term", "i_term", "d_term", "pid_output"
    ])
    
    print("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")

def cleanup_movement_system():
    """‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà"""
    global ep_robot, ep_chassis, move_file, turn_file
    
    print("üèÅ ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà...")
    
    if ep_robot:
        ep_robot.led.set_led(comp="all", effect="off")
    if ep_chassis:
        ep_chassis.drive_speed(x=0, y=0, z=0)
        ep_chassis.unsub_position()
        ep_chassis.unsub_attitude()
    
    if move_file:
        move_file.close()
    if turn_file:
        turn_file.close()
        
    if ep_robot:
        ep_robot.close()
    
    print("‚úÖ ‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")