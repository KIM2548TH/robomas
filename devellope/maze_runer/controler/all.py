# -*-coding:utf-8-*-
import csv
import os
import time
import statistics
import math
from collections import deque

from pid import PID, TurnPID
from map import Graph
import math
import numpy as np
import cv2
import csv

from robomaster import robot

# --- Global Variables ---
latest_chassis_position = [0, 0, 0]
latest_chassis_attitude = [0, 0, 0]
lastest_distance = [0]
tof_readings = deque(maxlen=5)   # <-- ‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å list ‡πÄ‡∏õ‡πá‡∏ô deque
filtered_distance = [0]
markers = []

LOG_CSV_PATH = "robot_log.csv"
log_csv_header_written = False


# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ global ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PID ‡πÅ‡∏•‡∏∞ tracking
move_pid_x = None
move_pid_y = None
turn_pid = None  # **‡πÄ‡∏û‡∏¥‡πà‡∏°: PID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô**


# --- ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ Global ---
STEP_SIZE = 0.6  # ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡πÄ‡∏°‡∏ï‡∏£)

# Global variables for DFS state
visited_nodes = set()
scan_memory = {}  # !! ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô

# **‡πÄ‡∏û‡∏¥‡πà‡∏°: Map System**
maze_graph = Graph()  # ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏°‡∏û
coord_to_node_id = {}  # ‡πÅ‡∏°‡∏û‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Å‡∏±‡∏ö node_id



def log_robot_data():
    global log_csv_header_written
    timestamp = time.time()
    position = list(latest_chassis_position)
    tof1 = filtered_distance[0]  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß
    # ... (‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö marker ‡πÄ‡∏õ‡πá‡∏ô object ‡∏´‡∏£‡∏∑‡∏≠ string
    if markers:
        marker_last = markers[-1]
        marker_name = marker_last.text if hasattr(marker_last, "text") else str(marker_last)
    else:
        marker_name = ""
    yaw_gimbal = latest_chassis_attitude[0] if len(latest_chassis_attitude) > 0 else None

    write_header = not os.path.exists(LOG_CSV_PATH) or not log_csv_header_written
    with open(LOG_CSV_PATH, "a", newline="") as f:
        writer = csv.writer(f)
        if write_header:
            writer.writerow(["timestamp", "position", "tof1", "marker", "yaw_gimbal"])
            log_csv_header_written = True
        writer.writerow([
            timestamp,
            f"{position[0]:.3f},{position[1]:.3f}",
            tof1,
            marker_name,
            yaw_gimbal
        ])

def get_stable_distance_reading():
    """
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô median filter ‡πÅ‡∏•‡πâ‡∏ß (mm)
    """
    global filtered_distance
    return filtered_distance[0]

def apply_median_filter(new_value, buffer_size=7):
    global tof_readings, filtered_distance
    tof_readings.append(new_value)
    if len(tof_readings) > buffer_size:
        tof_readings.pop(0)
    if len(tof_readings) >= 3:
        filtered_value = statistics.median(tof_readings)
    else:
        filtered_value = sum(tof_readings) / len(tof_readings)
    filtered_distance[0] = filtered_value
    return filtered_value

def sub_data_distance(sub_info):
    global lastest_distance
    raw_distance = sub_info[0]
    filtered_value = apply_median_filter(raw_distance)
    lastest_distance[0] = filtered_value
    log_robot_data()

def sub_chassis_position(position_info):
    global latest_chassis_position
    latest_chassis_position = list(position_info)
    log_robot_data()

def sub_chassis_attitude(attitude_info):
    global latest_chassis_attitude
    latest_chassis_attitude = list(attitude_info)
    log_robot_data()

def sub_data_angle(angle_info):
    global latest_chassis_attitude
    # ‡∏™‡∏°‡∏°‡∏ï‡∏¥ angle_info = [pitch, yaw, ...]
    # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á angle_info
    if len(angle_info) >= 2:
        latest_chassis_attitude[0] = angle_info[1]  # ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö index ‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á
    log_robot_data()

class MarkerInfo:
    def __init__(self, x, y, w, h, info):
        self._x = x
        self._y = y
        self._w = w
        self._h = h
        self._info = info
    @property
    def text(self):
        return str(self._info)

def on_detect_marker(marker_info):
    global markers
    x, y, w, h, info = marker_info[0]
    markers.clear()  # <<== ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
    markers.append(MarkerInfo(x, y, w, h, info))
    log_robot_data()



def correct_robot_orientation( target_yaw=0):
    """
    ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏´‡∏±‡∏ô‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    
    Args:
        ep_chassis: chassis controller
        target_yaw (float): ‡∏°‡∏∏‡∏° yaw ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (‡∏≠‡∏á‡∏®‡∏≤)
    """
    global turn_pid, latest_chassis_attitude
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô PID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô
    if turn_pid is None:
        turn_pid = TurnPID(kp=1.0*0.7, ki=0.1*0.7, kd=0)
    
    turn_pid.reset()
    
    current_yaw = latest_chassis_attitude[0]
    yaw_error = target_yaw - current_yaw
    
    # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á -180 ‡∏ñ‡∏∂‡∏á 180
    while yaw_error > 180:
        yaw_error -= 360
    while yaw_error < -180:
        yaw_error += 360
    
    print(f"üß≠ ‡∏õ‡∏£‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á: ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô {current_yaw:.1f}¬∞ -> ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ {target_yaw:.1f}¬∞ (‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏°‡∏∏‡∏ô {yaw_error:.1f}¬∞)")
    
    # ‡∏ñ‡πâ‡∏≤‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏≠‡∏á‡∏®‡∏≤ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö
    if abs(yaw_error) < 0.05:
        print("‚úÖ ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß")
        return
    
    tolerance = 0.05  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ
    stable_count = 0
    max_iterations = 120
    iteration = 0
    
    while iteration < max_iterations:
        iteration += 1
        
        current_yaw = latest_chassis_attitude[0]
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì PID output
        turn_output, angle_error, p, i, d = turn_pid.compute(target_yaw, current_yaw)
        
        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô
        max_turn_speed = 100  # ‡∏≠‡∏á‡∏®‡∏≤/‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        turn_speed = max(-max_turn_speed, min(max_turn_speed, turn_output))
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        if iteration % 10 == 0:
            print(f"   üîÑ ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_yaw:.1f}¬∞ ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {angle_error:.1f}¬∞ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß: {turn_speed:.1f}¬∞/s")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß
        if abs(angle_error) < tolerance:
            stable_count += 1
            if stable_count >= 30:
                print("‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à!")
                break
        else:
            stable_count = 0
        
        # ‡∏™‡∏±‡πà‡∏á‡∏´‡∏°‡∏∏‡∏ô chassis
        ep_chassis.drive_speed(x=0, y=0, z=turn_speed)
        time.sleep(0.01)
    
    # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô
    ep_chassis.drive_speed(x=0, y=0, z=0)
    time.sleep(0.1)

def move_direction_pid(ep_chassis, direction, distance):
    """
    ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏î‡πâ‡∏ß‡∏¢ PID control (‡πÑ‡∏°‡πà‡∏´‡∏°‡∏∏‡∏ô‡∏ï‡∏±‡∏ß - ‡∏™‡πÑ‡∏•‡∏î‡πå)
    
    Args:
        ep_chassis: chassis controller
        direction (str): ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà ('x+', 'x-', 'y+', 'y-')
        distance (float): ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà (‡πÄ‡∏°‡∏ï‡∏£)
    
    Returns:
        float: ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
    """
    global move_pid_x, move_pid_y, latest_chassis_position
    
    # ‡πÅ‡∏°‡∏õ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
    direction_map = {
        'x+': {'x': 1, 'y': 0, 'name': '‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ (x+)'},     # ‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
        'x-': {'x': -1, 'y': 0, 'name': '‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á (x-)'},    # ‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á
        'y+': {'x': 0, 'y': 1, 'name': '‡∏Ç‡∏ß‡∏≤ (y+)'},          # ‡πÑ‡∏õ‡∏Ç‡∏ß‡∏≤
        'y-': {'x': 0, 'y': -1, 'name': '‡∏ã‡πâ‡∏≤‡∏¢ (y-)'}         # ‡πÑ‡∏õ‡∏ã‡πâ‡∏≤‡∏¢
    }
    
    if direction not in direction_map:
        print(f"‚ùå ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {direction}")
        return 0
    
    dir_info = direction_map[direction]
    print(f"üö∂ ‡∏™‡πÑ‡∏•‡∏î‡πå{dir_info['name']} {distance:.3f}m")
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô PID controllers
    if move_pid_x is None:
        move_pid_x = PID(kp=1.0, ki=0.1, kd=0)
    if move_pid_y is None:
        move_pid_y = PID(kp=1.0, ki=0.1, kd=0)
    
    # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï PID
    move_pid_x.reset()
    move_pid_y.reset()
    
    # **‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ list() ‡πÅ‡∏ó‡∏ô .copy()**
    start_pos = list(latest_chassis_position)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    target_x = start_pos[0] + (distance * dir_info['x'])
    target_y = start_pos[1] + (distance * dir_info['y'])
    
    tolerance = 0.05  # 1cm
    stable_iterations = 0
    max_iterations = 150
    iteration = 0
    
    print(f"üìç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà: ({start_pos[0]:.3f}, {start_pos[1]:.3f})")
    print(f"üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ({target_x:.3f}, {target_y:.3f})")
    
    while iteration < max_iterations:
        iteration += 1

        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        dx = latest_chassis_position[0] - start_pos[0]
        dy = latest_chassis_position[1] - start_pos[1]
        current_distance = math.sqrt(dx*dx + dy*dy)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì error ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏Å‡∏ô
        error_x = target_x - latest_chassis_position[0]
        error_y = target_y - latest_chassis_position[1]
        total_error = math.sqrt(error_x*error_x + error_y*error_y)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡πÜ 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        if iteration % 25 == 0:
            progress = min(100, (current_distance / distance) * 100) if distance > 0 else 100
            # print(f"   üìä {current_distance:.3f}m/{distance:.3f}m ({progress:.1f}%) error:{total_error:.3f}m")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if total_error < tolerance:
            stable_iterations += 1
            if stable_iterations >= 30:
                print("‚úÖ ‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
                break
        else:
            stable_iterations = 0
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì PID output ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏Å‡∏ô
        pid_output_x, _, _, _, _, _ = move_pid_x.compute(target_x, latest_chassis_position[0])
        pid_output_y, _, _, _, _, _ = move_pid_y.compute(target_y, latest_chassis_position[1])
        
        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        max_speed = 0.8  # m/s
        speed_x = max(-max_speed, min(max_speed, pid_output_x))
        speed_y = max(-max_speed, min(max_speed, pid_output_y))
        
        # ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà (‡∏™‡πÑ‡∏•‡∏î‡πå - ‡πÑ‡∏°‡πà‡∏´‡∏°‡∏∏‡∏ô)
        ep_chassis.drive_speed(x=speed_x, y=speed_y, z=0)
        time.sleep(0.05)
    
    # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
    ep_chassis.drive_speed(x=0, y=0, z=0)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
    final_dx = latest_chassis_position[0] - start_pos[0]
    final_dy = latest_chassis_position[1] - start_pos[1]
    final_distance = math.sqrt(final_dx*final_dx + final_dy*final_dy)
    
    print(f"‚úÖ ‡∏™‡πÑ‡∏•‡∏î‡πå‡πÄ‡∏™‡∏£‡πá‡∏à {final_distance:.3f}m")
    print(f"üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: ({latest_chassis_position[0]:.3f}, {latest_chassis_position[1]:.3f})")
    
    time.sleep(0.2)
    return final_distance

def move_direction_pid_with_emergency_brake(ep_chassis, direction, distance):
    """
    ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏î‡πâ‡∏ß‡∏¢ PID control (‡πÑ‡∏°‡πà‡∏´‡∏°‡∏∏‡∏ô‡∏ï‡∏±‡∏ß - ‡∏™‡πÑ‡∏•‡∏î‡πå)
    ‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏±‡∏ô‡∏ä‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô: ‡∏ñ‡πâ‡∏≤ filtered_distance < 250mm ‡∏à‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    """
    global move_pid_x, move_pid_y, latest_chassis_position
    # from controler.movement_slide import filtered_distance

    direction_map = {
        'x+': {'x': 1, 'y': 0, 'name': '‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ (x+)'},
        'x-': {'x': -1, 'y': 0, 'name': '‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á (x-)'},
        'y+': {'x': 0, 'y': 1, 'name': '‡∏Ç‡∏ß‡∏≤ (y+)'},
        'y-': {'x': 0, 'y': -1, 'name': '‡∏ã‡πâ‡∏≤‡∏¢ (y-)'}
    }

    if direction not in direction_map:
        print(f"‚ùå ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {direction}")
        return 0

    dir_info = direction_map[direction]
    print(f"üö∂ ‡∏™‡πÑ‡∏•‡∏î‡πå{dir_info['name']} {distance:.3f}m")

    if move_pid_x is None:
        move_pid_x = PID(kp=1.0, ki=0.1, kd=0)
        
    if move_pid_y is None:
        move_pid_y = PID(kp=1.0, ki=0.1, kd=0)

    move_pid_x.reset()
    move_pid_y.reset()

    start_pos = list(latest_chassis_position)
    target_x = start_pos[0] + (distance * dir_info['x'])
    target_y = start_pos[1] + (distance * dir_info['y'])

    tolerance = 0.05
    stable_iterations = 0
    max_iterations = 150
    iteration = 0

    print(f"üìç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà: ({start_pos[0]:.3f}, {start_pos[1]:.3f})")
    print(f"üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ({target_x:.3f}, {target_y:.3f})")

    while iteration < max_iterations:
        iteration += 1

        # Emergency brake: ‡∏ñ‡πâ‡∏≤ ToF < 300mm ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        if filtered_distance[0] < 300:
            print("üõë Emergency Brake! ToF < 250mm")
            ep_chassis.drive_speed(x=0, y=0, z=0)
            ep_chassis.drive_speed(x=0, y=0, z=0)
            ep_chassis.drive_speed(x=0, y=0, z=0)
            ep_chassis.drive_speed(x=0, y=0, z=0)
            ep_chassis.drive_speed(x=0, y=0, z=0)
            ep_chassis.drive_speed(x=0, y=0, z=0)
            ep_chassis.drive_speed(x=0, y=0, z=0)
            ep_chassis.drive_speed(x=0, y=0, z=0)
            break

        dx = latest_chassis_position[0] - start_pos[0]
        dy = latest_chassis_position[1] - start_pos[1]
        current_distance = math.sqrt(dx*dx + dy*dy)

        error_x = target_x - latest_chassis_position[0]
        error_y = target_y - latest_chassis_position[1]
        total_error = math.sqrt(error_x*error_x + error_y*error_y)

        if total_error < tolerance:
            stable_iterations += 1
            if stable_iterations >= 30:
                print("‚úÖ ‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
                break
        else:
            stable_iterations = 0

        pid_output_x, *_ = move_pid_x.compute(target_x, latest_chassis_position[0])
        pid_output_y, *_ = move_pid_y.compute(target_y, latest_chassis_position[1])

        max_speed = 0.8
        speed_x = max(-max_speed, min(max_speed, pid_output_x))
        speed_y = max(-max_speed, min(max_speed, pid_output_y))

        ep_chassis.drive_speed(x=speed_x, y=speed_y, z=0)
        time.sleep(0.05)

    ep_chassis.drive_speed(x=0, y=0, z=0)

    final_dx = latest_chassis_position[0] - start_pos[0]
    final_dy = latest_chassis_position[1] - start_pos[1]
    final_distance = math.sqrt(final_dx*final_dx + final_dy*final_dy)

    print(f"‚úÖ ‡∏™‡πÑ‡∏•‡∏î‡πå‡πÄ‡∏™‡∏£‡πá‡∏à {final_distance:.3f}m")
    print(f"üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: ({latest_chassis_position[0]:.3f}, {latest_chassis_position[1]:.3f})")

    time.sleep(0.2)
    ep_gimbal.moveto(pitch=-6, yaw=0, pitch_speed=200, yaw_speed=200).wait_for_completed()
    return final_distance

def move_direction_pid_wall(ep_chassis, direction, distance):
    """
    ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏î‡πâ‡∏ß‡∏¢ PID control ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≥‡πÅ‡∏û‡∏á
    
    Args:
        ep_chassis: chassis controller
        direction (str): ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà ('x+', 'x-', 'y+', 'y-')
        distance (float): ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà (‡πÄ‡∏°‡∏ï‡∏£)
    
    Returns:
        float: ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
    """
    global move_pid_x, move_pid_y, latest_chassis_position
    
    # ‡πÅ‡∏°‡∏õ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
    direction_map = {
        'x+': {'x': 1, 'y': 0, 'name': '‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ (x+)'},     # ‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
        'x-': {'x': -1, 'y': 0, 'name': '‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á (x-)'},    # ‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á
        'y+': {'x': 0, 'y': 1, 'name': '‡∏Ç‡∏ß‡∏≤ (y+)'},          # ‡πÑ‡∏õ‡∏Ç‡∏ß‡∏≤
        'y-': {'x': 0, 'y': -1, 'name': '‡∏ã‡πâ‡∏≤‡∏¢ (y-)'}         # ‡πÑ‡∏õ‡∏ã‡πâ‡∏≤‡∏¢
    }
    
    if direction not in direction_map:
        print(f"‚ùå ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {direction}")
        return 0
    
    dir_info = direction_map[direction]
    print(f"üîß ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á{dir_info['name']} {distance:.3f}m")
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô PID controllers
    if move_pid_x is None:
        move_pid_x = PID(kp=1.0*0.75, ki=0.1*0.75, kd=0)
    if move_pid_y is None:
        move_pid_y = PID(kp=1.0*0.75, ki=0.1*0.75, kd=0)
    
    # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï PID
    move_pid_x.reset()
    move_pid_y.reset()
    
    # **‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ list() ‡πÅ‡∏ó‡∏ô .copy()**
    start_pos = list(latest_chassis_position)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    target_x = start_pos[0] + (distance * dir_info['x'])
    target_y = start_pos[1] + (distance * dir_info['y'])
    
    tolerance = 0.05  # 5cm ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    stable_iterations = 0
    max_iterations = 200  # ‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô
    iteration = 0
    
    while iteration < max_iterations:
        iteration += 1
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì error ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏Å‡∏ô
        error_x = target_x - latest_chassis_position[0]
        error_y = target_y - latest_chassis_position[1]
        total_error = math.sqrt(error_x*error_x + error_y*error_y)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if total_error < tolerance:
            stable_iterations += 1
            if stable_iterations >= 45:
                print("‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à!")
                break
        else:
            stable_iterations = 0
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì PID output ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏Å‡∏ô
        pid_output_x, _, _, _, _, _ = move_pid_x.compute(target_x, latest_chassis_position[0])
        pid_output_y, _, _, _, _, _ = move_pid_y.compute(target_y, latest_chassis_position[1])
        
        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á)
        max_speed = 0.8  # m/s
        speed_x = max(-max_speed, min(max_speed, pid_output_x))
        speed_y = max(-max_speed, min(max_speed, pid_output_y))
        
        # ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà (‡∏™‡πÑ‡∏•‡∏î‡πå - ‡πÑ‡∏°‡πà‡∏´‡∏°‡∏∏‡∏ô)
        ep_chassis.drive_speed(x=speed_x, y=speed_y, z=0)
        time.sleep(0.05)
    
    # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
    ep_chassis.drive_speed(x=0, y=0, z=0)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
    final_dx = latest_chassis_position[0] - start_pos[0]
    final_dy = latest_chassis_position[1] - start_pos[1]
    final_distance = math.sqrt(final_dx*final_dx + final_dy*final_dy)
    
    print(f"‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à {final_distance:.3f}m")
    
    time.sleep(0.05)
    return final_distance

def move_forward_pid(ep_chassis, distance):
    """‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ (x+) ‡∏î‡πâ‡∏ß‡∏¢ PID"""
    return move_direction_pid(ep_chassis, 'x+', distance)

def move_back_pid(ep_chassis, distance):
    """‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á (x-) ‡∏î‡πâ‡∏ß‡∏¢ PID"""
    return move_direction_pid(ep_chassis, 'x-', distance)

def move_right_pid(ep_chassis, distance):
    """‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏Ç‡∏ß‡∏≤ (y+) ‡∏î‡πâ‡∏ß‡∏¢ PID"""
    return move_direction_pid(ep_chassis, 'y+', distance)

def move_left_pid(ep_chassis, distance):
    """‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏ã‡πâ‡∏≤‡∏¢ (y-) ‡∏î‡πâ‡∏ß‡∏¢ PID"""
    return move_direction_pid(ep_chassis, 'y-', distance)


def move_to_tile_center_from_walls(ep_chassis, way, marker, tof_wall, tile_size=0.6, ep_gimbal=None):
    """
    ‡∏£‡∏±‡∏ö way, marker, tof_wall (list 4 ‡∏ä‡πà‡∏≠‡∏á) ‡∏à‡∏≤‡∏Å move_gimbal
    ‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏ö‡∏•‡πá‡∏≠‡∏Å 0.6x0.6m ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ô‡∏±‡πâ‡∏ô
    ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏≤‡∏á‡πÅ‡∏Å‡∏ô ‡∏à‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏Å‡∏ô‡∏ô‡∏±‡πâ‡∏ô
    ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏•‡∏¢ ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏≤‡πÄ‡∏™‡∏≤
    """
    global latest_chassis_position

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô dict ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏¥‡∏®‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≥‡πÅ‡∏û‡∏á
    wall = {}
    dir_map = ['left', 'front', 'right', 'back']
    for i in range(4):
        if way[i] == 0 and tof_wall[i] is not None:
            wall[dir_map[i]] = tof_wall[i]

    wall_count = len(wall)
    if wall_count > 1:
        # ‡∏õ‡∏Å‡∏ï‡∏¥: ‡πÉ‡∏ä‡πâ‡∏™‡∏π‡∏ï‡∏£‡πÄ‡∏î‡∏¥‡∏°
        x_now, y_now = latest_chassis_position[0], latest_chassis_position[1]
        min_x = x_now - tile_size/2
        max_x = x_now + tile_size/2
        min_y = (y_now - tile_size/2)
        max_y = (y_now + tile_size/2)

        if 'left' in wall:
            min_y = y_now - wall['left']/1000
            max_y = min_y + tile_size
        elif 'right' in wall:
            max_y = y_now + wall['right']/1000
            min_y = max_y - tile_size

        if 'front' in wall:
            max_x = x_now + wall['front']/1000
            min_x = max_x - tile_size
        elif 'back' in wall:
            min_x = x_now - wall['back']/1000
            max_x = min_x + tile_size

        center_x = (min_x + max_x) / 2
        center_y = (min_y + max_y) / 2

        print(f"üü¶ ‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï: x={min_x:.3f}~{max_x:.3f}, y={min_y:.3f}~{max_y:.3f}")
        print(f"üéØ ‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á: ({center_x:.3f}, {center_y:.3f})")
        print(f"üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ({x_now:.3f}, {y_now:.3f})")
        print(f"üîñ marker: {marker}")

        # ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏Å‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if ('front' in wall or 'back' in wall):
            move_direction_pid(ep_chassis, 'x+', center_x - x_now)
            correct_robot_orientation( target_yaw=0)
        if ('left' in wall or 'right' in wall):
            move_direction_pid(ep_chassis, 'y+', center_y - y_now)
            correct_robot_orientation( target_yaw=0)
    else:
        # ‡∏°‡∏µ‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏•‡∏¢: ‡∏´‡∏≤‡πÄ‡∏™‡∏≤
        wall_side = None
        for k in wall.keys():
            wall_side = k
        if ep_gimbal is not None:
            print("üîé ‡∏°‡∏µ‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏•‡∏¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏≤‡πÄ‡∏™‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á...")
            position = find_pillar_and_move_to_center(ep_chassis, ep_gimbal, way, tof_wall, tile_size)
            center_x = position[0]
            center_y = position[1]

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ!
            x_now, y_now = latest_chassis_position[0], latest_chassis_position[1]

            # correct_robot_orientation( target_yaw=0)
            move_to_center(ep_chassis, center_x, center_y, get_position_func=lambda: (latest_chassis_position[0], latest_chassis_position[1]))
            
            # move_direction_pid(ep_chassis, 'y+', center_y - y_now)
            correct_robot_orientation( target_yaw=0)

        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡πÄ‡∏™‡∏≤‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á ep_gimbal ‡∏°‡∏≤)")
def sweep_angles_list(start, end, step):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏°‡∏∏‡∏° sweep ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏£‡∏ì‡∏µ start < end ‡πÅ‡∏•‡∏∞ start > end"""
    if start < end:
        return list(range(start, end + 1, step))
    else:
        return list(range(start, end - 1, -step))

import math
import time

# ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
# def get_stable_distance_reading():
#     # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô mm
#     return 500
#
# def sweep_angles_list(start, end, step):
#     # ‡∏™‡∏£‡πâ‡∏≤‡∏á list ‡∏Ç‡∏≠‡∏á‡∏°‡∏∏‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ sweep
#     return list(range(start, end + step, step))

def find_pillar_and_move_to_center(ep_chassis, ep_gimbal, way, tof_wall, tile_size=0.6):
    """
    ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏™‡∏≤ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á Tile ‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á
    way: [‡∏ã‡πâ‡∏≤‡∏¢, ‡∏´‡∏ô‡πâ‡∏≤, ‡∏Ç‡∏ß‡∏≤, ‡∏´‡∏•‡∏±‡∏á] (0=‡∏°‡∏µ‡∏Å‡∏≥‡πÅ‡∏û‡∏á, 1=‡πÑ‡∏°‡πà‡∏°‡∏µ)
    tof_wall: ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≥‡πÅ‡∏û‡∏á [‡∏ã‡πâ‡∏≤‡∏¢, ‡∏´‡∏ô‡πâ‡∏≤, ‡∏Ç‡∏ß‡∏≤, ‡∏´‡∏•‡∏±‡∏á] (mm)
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤: tuple (center_x, center_y) ‡∏´‡∏£‡∏∑‡∏≠ None ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠
    """
    global latest_chassis_position
    if latest_chassis_position is None or len(latest_chassis_position) < 2:
        print("Error: latest_chassis_position is not available.")
        return None

    x_now, y_now = latest_chassis_position[0], latest_chassis_position[1]
    print(f"ü§ñ Robot starting at: ({x_now:.3f}, {y_now:.3f})")

    # --- 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏°‡∏∏‡∏°‡∏Å‡∏ß‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ---
    PILLAR_NAMES = ["FORWARD_LEFT (+x, -y)", "FORWARD_RIGHT (+x, +y)", "BACK_LEFT (-x, -y)", "BACK_RIGHT (-x, +y)"]
    SWEEP_RANGES = [
        (-80, -10, 10),    # FORWARD_LEFT -> ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏µ‡πà -45
        (10, 80, 10),      # FORWARD_RIGHT -> ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏µ‡πà +45
        (-170, -100, 10),  # BACK_LEFT -> ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏µ‡πà -135
        (100, 170, 10),    # BACK_RIGHT -> ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏µ‡πà +135
    ]

    skip_sweep = [False] * 4
    if way[1] == 0: skip_sweep[0] = True; skip_sweep[1] = True  # ‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡∏´‡∏ô‡πâ‡∏≤
    if way[3] == 0: skip_sweep[2] = True; skip_sweep[3] = True  # ‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡∏´‡∏•‡∏±‡∏á
    if way[0] == 0: skip_sweep[0] = True; skip_sweep[2] = True  # ‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡∏ã‡πâ‡∏≤‡∏¢
    if way[2] == 0: skip_sweep[1] = True; skip_sweep[3] = True  # ‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡∏Ç‡∏ß‡∏≤

    # --- 2. ‡∏Å‡∏ß‡∏≤‡∏î‡∏´‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏≤‡∏ó‡∏∏‡∏Å‡∏ï‡πâ‡∏ô ---
    pillar_coords = [None] * 4
    for i in range(4):
        if skip_sweep[i]:
            print(f"üöß Skipping {PILLAR_NAMES[i]} due to wall.")
            continue

        print(f"üîé Sweeping for {PILLAR_NAMES[i]}...")
        readings = []
        sweep_angles = sweep_angles_list(*SWEEP_RANGES[i])
        for yaw in sweep_angles:
            ep_gimbal.moveto(pitch=-6, yaw=yaw, pitch_speed=50, yaw_speed=50).wait_for_completed()
            dist_m = get_stable_distance_reading() / 1000.0
            readings.append((dist_m, yaw))

        valid_readings = [r for r in readings if 0.1 < r[0] < tile_size * 1.5]
        if valid_readings:
            min_dist, min_yaw = min(valid_readings, key=lambda x: x[0])
            rad = math.radians(min_yaw)
            px = x_now + min_dist * math.cos(rad)
            py = y_now + min_dist * math.sin(rad)
            pillar_coords[i] = (px, py)
            print(f"  üìå Found {PILLAR_NAMES[i]} at ({px:.3f}, {py:.3f})")
        else:
            print(f"  ‚ùå Did not find {PILLAR_NAMES[i]}.")

    # --- 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠ (Sanity Check) ---
    found_pillars_count = sum(1 for p in pillar_coords if p is not None)
    print(f"‚úÖ Found {found_pillars_count} pillars in total.")

    MIN_PILLARS_REQUIRED = 2
    if way == [1, 1, 1, 1] and found_pillars_count < MIN_PILLARS_REQUIRED:
        print(f"‚ö†Ô∏è No walls and not enough pillars found ({found_pillars_count} < {MIN_PILLARS_REQUIRED}). Aborting.")
        return None

    # --- 4. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡∏≤‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï (min/max) ---
    min_x, max_x, min_y, max_y = None, None, None, None

    if way[1] == 0 and tof_wall[1] is not None: max_x = x_now + tof_wall[1] / 1000.0
    if way[3] == 0 and tof_wall[3] is not None: min_x = x_now - tof_wall[3] / 1000.0
    if way[0] == 0 and tof_wall[0] is not None: min_y = y_now - tof_wall[0] / 1000.0
    if way[2] == 0 and tof_wall[2] is not None: max_y = y_now + tof_wall[2] / 1000.0

    front_pillars_x = [p[0] for i, p in enumerate(pillar_coords) if i in [0, 1] and p is not None]
    back_pillars_x = [p[0] for i, p in enumerate(pillar_coords) if i in [2, 3] and p is not None]
    left_pillars_y = [p[1] for i, p in enumerate(pillar_coords) if i in [0, 2] and p is not None]
    right_pillars_y = [p[1] for i, p in enumerate(pillar_coords) if i in [1, 3] and p is not None]

    if max_x is None and front_pillars_x: max_x = max(front_pillars_x)
    if min_x is None and back_pillars_x:   min_x = min(back_pillars_x)
    if min_y is None and left_pillars_y:   min_y = min(left_pillars_y)
    if max_y is None and right_pillars_y:   max_y = max(right_pillars_y)

    # --- 5. ‡πÉ‡∏ä‡πâ tile_size ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏£‡∏≠‡∏á ---
    if max_x is not None and min_x is None: min_x = max_x - tile_size
    if min_x is not None and max_x is None: max_x = min_x + tile_size
    if max_y is not None and min_y is None: min_y = max_y - tile_size
    if min_y is not None and max_y is None: max_y = min_y + tile_size

    if all(v is None for v in [min_x, max_x, min_y, max_y]):
        print("‚ö†Ô∏è Cannot determine any boundary. Aborting.")
        return None

    # --- 6. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á ---
    center_x = (min_x + max_x) / 2
    center_y = (min_y + max_y) / 2

    print(f"üü¶ Calculated Box: x=[{min_x:.3f}, {max_x:.3f}], y=[{min_y:.3f}, {max_y:.3f}]")
    print(f"üéØ Target Center: ({center_x:.3f}, {center_y:.3f})")

    return (center_x, center_y)




def move_to_center(ep_chassis, target_x, target_y, get_position_func, tolerance=0.05, max_time=5.0):
    """
    ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á (target_x, target_y) ‡∏ó‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏î‡πâ‡∏ß‡∏¢ PID 2 ‡πÅ‡∏Å‡∏ô
    get_position_func: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (x, y)
    """
    global move_pid_x, move_pid_y

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á PID ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    if move_pid_x is None:
        move_pid_x = PID(kp=1.0, ki=0.1, kd=0)
    if move_pid_y is None:
        move_pid_y = PID(kp=1.0, ki=0.1, kd=0)

    move_pid_x.reset()
    move_pid_y.reset()

    start_time = time.time()
    stable_count = 0

    while True:
        x_now, y_now = latest_chassis_position[0], latest_chassis_position[1]
        error_x = target_x - x_now
        error_y = target_y - y_now
        dist = math.hypot(error_x, error_y)

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì PID output
        pid_output_x, *_ = move_pid_x.compute(target_x, x_now)
        pid_output_y, *_ = move_pid_y.compute(target_y, y_now)

        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
        max_speed = 0.8
        speed_x = max(-max_speed, min(max_speed, pid_output_x))
        speed_y = max(-max_speed, min(max_speed, pid_output_y))

        ep_chassis.drive_speed(x=speed_x, y=speed_y, z=0)

        if dist < tolerance:
            stable_count += 1
            if stable_count > 50:
                break
        else:
            stable_count = 0

        if time.time() - start_time > max_time:
            break
        time.sleep(0.05)
    # correct_robot_orientation( target_yaw=0)
    ep_chassis.drive_speed(x=0, y=0, z=0)
    ep_gimbal.moveto(pitch=-6, yaw=0, pitch_speed=500, yaw_speed=500).wait_for_completed()
    correct_robot_orientation( target_yaw=0)



# -*-coding:utf-8-*-

# Copyright (c) 2020 DJI.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License in the file LICENSE.txt or at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.







# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Helper ---
def format_coords(coords):
    """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•"""
    return f"({coords[0]:.2f}, {coords[1]:.2f})"


def get_stable_distance_reading():
    """
    ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÅ‡∏ö‡∏ö stable ‡πÇ‡∏î‡∏¢‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
    
    Returns:
        float: ‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà stable
    """
    stable_readings = []

    # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ 11 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    for i in range(5):
        stable_readings.append(lastest_distance[0])
        time.sleep(0.03)  # ‡∏£‡∏≠ 30ms

    # ‡πÉ‡∏ä‡πâ median ‡∏Ç‡∏≠‡∏á 5 ‡∏Ñ‡πà‡∏≤
    stable_value = statistics.median(stable_readings)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
    variance = max(stable_readings) - min(stable_readings)
    if variance > 100:  # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡∏ú‡∏±‡∏ô‡πÅ‡∏õ‡∏£‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 10cm
        print(f"‚ö†Ô∏è  ToF ‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£: variance={variance:.0f}mm, readings={stable_readings}")
    
    return stable_value


# def detect_red_color(ep_camera):
#     time.sleep(0.5)
#     """
#     ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á Robomaster
#     Args:
#         ep_camera (robomaster.camera): camera module ‡∏Ç‡∏≠‡∏á Robomaster
#     Returns:
#         bool: True ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏™‡∏µ‡πÅ‡∏î‡∏á, False ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö
#     """
#     img = ep_camera.read_cv2_image()
#     if img is None:
#         print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
#         return False

#     # ‡∏•‡∏î noise
#     img_blur = cv2.GaussianBlur(img, (5, 5), 0)

#     # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô HSV
#     hsv_img = cv2.cvtColor(img_blur, cv2.COLOR_BGR2HSV)

#     # ‡∏ä‡πà‡∏ß‡∏á‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÅ‡∏ö‡∏ö‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
#     lower_red1 = np.array([0, 80, 80])    # Hue ‡∏ï‡πà‡∏≥, ‡πÄ‡∏û‡∏¥‡πà‡∏° S/V ‡πÉ‡∏´‡πâ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
#     upper_red1 = np.array([10, 255, 255])

#     lower_red2 = np.array([170, 80, 80])  # Hue ‡∏™‡∏π‡∏á
#     upper_red2 = np.array([180, 255, 255])

#     mask1 = cv2.inRange(hsv_img, lower_red1, upper_red1)
#     mask2 = cv2.inRange(hsv_img, lower_red2, upper_red2)

#     final_mask = mask1 + mask2

#     # ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡πÉ‡∏ô mask
#     kernel = np.ones((5, 5), np.uint8)
#     final_mask = cv2.morphologyEx(final_mask, cv2.MORPH_CLOSE, kernel)
#     final_mask = cv2.morphologyEx(final_mask, cv2.MORPH_OPEN, kernel)

#     # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö pixel ‡∏™‡∏µ‡πÅ‡∏î‡∏á
#     red_pixels = np.count_nonzero(final_mask)
#     if red_pixels > 5000:  # ‡∏õ‡∏£‡∏±‡∏ö threshold ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
#         print(f"‚úÖ ‡∏û‡∏ö‡∏™‡∏µ‡πÅ‡∏î‡∏á ({red_pixels} pixels)")
#         return True
#     else:
#         print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏µ‡πÅ‡∏î‡∏á ({red_pixels} pixels)")
#         return False



# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πÅ‡∏Å‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏î‡πâ‡∏ß‡∏¢ Median Filter ---
def move_gimbal(ep_gimbal, ep_chassis, ep_vision, ep_camera):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πÅ‡∏Å‡∏ô 4 ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á + Median Filter + ‡∏õ‡∏£‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á
    ‡πÅ‡∏•‡∏∞‡∏Ç‡∏¢‡∏±‡∏ö‡πÑ‡∏õ‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏ö‡∏•‡πá‡∏≠‡∏Å (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏à‡∏≠‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏•‡∏¢)
    """
    # from controler.movement_slide import latest_chassis_position, move_to_center, move_to_tile_center_from_walls

    way = [0, 0, 0, 0]  # [‡∏ã‡πâ‡∏≤‡∏¢, ‡∏´‡∏ô‡πâ‡∏≤, ‡∏Ç‡∏ß‡∏≤, ‡∏´‡∏•‡∏±‡∏á]
    marker = ["No", "No", "No", "No"]  # [‡∏ã‡πâ‡∏≤‡∏¢, ‡∏´‡∏ô‡πâ‡∏≤, ‡∏Ç‡∏ß‡∏≤, ‡∏´‡∏•‡∏±‡∏á]
    stable_distances = [None, None, None, None]

    print("üß≠ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πÅ‡∏Å‡∏ô...")
    correct_robot_orientation( target_yaw=0)
    time.sleep(0.1)

    # sweep 4 ‡∏ó‡∏¥‡∏® ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô
    yaws = [-90, 0, 90, 180]
    for i, yaw in enumerate(yaws):
        ep_gimbal.moveto(pitch=-6, yaw=yaw, pitch_speed=25, yaw_speed=25).wait_for_completed()
        time.sleep(0.1)
        stable_distance = get_stable_distance_reading()
        stable_distances[i] = stable_distance
        print(f"‡∏´‡∏±‡∏ô {['‡∏ã‡πâ‡∏≤‡∏¢','‡∏´‡∏ô‡πâ‡∏≤','‡∏Ç‡∏ß‡∏≤','‡∏´‡∏•‡∏±‡∏á'][i]}: raw={lastest_distance[0]:.0f}mm, stable={stable_distance:.0f}mm")
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö marker ‡∏´‡∏•‡∏±‡∏á‡∏™‡πÅ‡∏Å‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ó‡∏¥‡∏® (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        # if detect_red_color(ep_camera):
        #     checkmarkers(i, marker, ep_vision, yaw)

    # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏á‡∏™‡πÅ‡∏Å‡∏ô
    for i, stable_distance in enumerate(stable_distances):
        if i == 3:
            wall_th = 200
        else:
            wall_th = 170
        if stable_distance < 200:
            way[i] = 0
        elif stable_distance < 400:
            way[i] = 0
        else:
            way[i] = 1

    # === ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡∏ó‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏™‡πÅ‡∏Å‡∏ô (‡∏Ç‡∏¢‡∏±‡∏ö x,y ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô) ===
    x_now, y_now = latest_chassis_position[0], latest_chassis_position[1]
    tile_size_x = 0.6   # ‡∏´‡∏ô‡πâ‡∏≤-‡∏´‡∏•‡∏±‡∏á
    tile_size_y = 0.6  # ‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤ (170mm)

    wall_count = way.count(0)
    if wall_count < 2:
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ
        print("üîé ‡πÄ‡∏à‡∏≠‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏•‡∏¢ ‡πÉ‡∏ä‡πâ move_to_tile_center_from_walls")
        move_to_tile_center_from_walls(
            ep_chassis,
            way,
            marker,
            stable_distances,
            tile_size=0.6,
            ep_gimbal=ep_gimbal
        )
        
    else:
        # ‡πÄ‡∏î‡∏¥‡∏°: ‡∏Ç‡∏¢‡∏±‡∏ö x,y ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ PID
        # --- Y (‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤) ---
        tile_size_x = 0.6-0.2   # ‡∏´‡∏ô‡πâ‡∏≤-‡∏´‡∏•‡∏±‡∏á
        tile_size_y = 0.6-0.2  # ‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤ (170mm)
        if way[0] == 0 and way[2] == 0:
            min_y = (y_now - stable_distances[0]/1000)
            max_y = (y_now + stable_distances[2]/1000)
            center_y = ((min_y + max_y) / 2)
        elif way[0] == 0:
            min_y = (y_now - stable_distances[0]/1000)
            center_y = (min_y + tile_size_y/2)
        elif way[2] == 0:
            max_y = (y_now + stable_distances[2]/1000)
            center_y = (max_y - tile_size_y/2)
        else:
            center_y = y_now

        # --- X (‡∏´‡∏ô‡πâ‡∏≤-‡∏´‡∏•‡∏±‡∏á) ---
        if way[1] == 0 and way[3] == 0:
            min_x = x_now - stable_distances[3]/1000
            max_x = x_now + stable_distances[1]/1000
            center_x = (min_x + max_x) / 2
        elif way[1] == 0:
            max_x = x_now + stable_distances[1]/1000
            center_x = max_x - tile_size_x/2
        elif way[3] == 0:
            min_x = x_now - stable_distances[3]/1000
            center_x = min_x + tile_size_x/2
        else:
            center_x = x_now

        print(f"üéØ ‡∏Ç‡∏¢‡∏±‡∏ö‡∏ó‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÑ‡∏õ‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á tile: ({center_x:.3f}, {center_y:.3f})")

        move_to_center(
            ep_chassis,
            center_x,
            center_y,
            get_position_func=lambda: (latest_chassis_position[0], latest_chassis_position[1])
        )
    # correct_robot_orientation( target_yaw=0)

    # ‡∏´‡∏±‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    ep_gimbal.moveto(pitch=-6, yaw=0, pitch_speed=300, yaw_speed=300).wait_for_completed()
    time.sleep(0.1)
    print("üß≠ ‡∏õ‡∏£‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏™‡πÅ‡∏Å‡∏ô...")
    correct_robot_orientation( target_yaw=0)

    print(f"üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏á: {way} [‡∏ã‡πâ‡∏≤‡∏¢, ‡∏´‡∏ô‡πâ‡∏≤, ‡∏Ç‡∏ß‡∏≤, ‡∏´‡∏•‡∏±‡∏á]")
    print(f"üìç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô Marker: {marker} [‡∏ã‡πâ‡∏≤‡∏¢, ‡∏´‡∏ô‡πâ‡∏≤, ‡∏Ç‡∏ß‡∏≤, ‡∏´‡∏•‡∏±‡∏á]")

    return way, marker  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ way ‡πÅ‡∏•‡∏∞ marker

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏î‡πâ‡∏ß‡∏¢ DFS ---
def explore_from(current_coords, ep_chassis, ep_gimbal, ep_vision, ep_camera):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô DFS ‡∏´‡∏•‡∏±‡∏Å (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå)
    - ‡∏™‡∏≥‡∏£‡∏ß‡∏à‡πÅ‡∏ö‡∏ö Recursive
    - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà 7x7 ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ï‡∏±‡∏ß
    - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ STEP_SIZE
    """
    global visited_nodes, scan_memory, maze_graph, coord_to_node_id

    # =======================================================================
    # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ô‡∏µ‡πâ)
    # =======================================================================
    MAP_SIZE = 7
    STEP_SIZE = 0.6  # **‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á**

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏à‡∏∏‡∏î (0,0) ‡πÄ‡∏õ‡πá‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á
    # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà 7x7 ‡∏à‡∏∞‡∏°‡∏µ 3 ‡∏Å‡πâ‡∏≤‡∏ß‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡πÑ‡∏õ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ó‡∏¥‡∏®
    # ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô ‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ñ‡∏∑‡∏≠: 3 * 0.6 = 2.1 ‡πÄ‡∏°‡∏ï‡∏£
    MAP_MIN_X = 0.0
    MAP_MIN_Y = 0.0
    MAP_MAX_X = (MAP_SIZE - 1) * STEP_SIZE  # ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏≠ 0.6
    MAP_MAX_Y = (MAP_SIZE - 1) * STEP_SIZE  # ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏≠ 0.6

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ã‡πâ‡∏≠‡∏ô (Nested Function) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï
    def is_within_bounds(coords):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î (x, y) ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        x, y = coords
        epsilon = 0.01  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
        
        # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ True ‡∏´‡∏≤‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á Min ‡∏ñ‡∏∂‡∏á Max ‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏Å‡∏ô X ‡πÅ‡∏•‡∏∞ Y
        return (MAP_MIN_X - epsilon <= x <= MAP_MAX_X + epsilon and
                MAP_MIN_Y - epsilon <= y <= MAP_MAX_Y + epsilon)

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô)
    if not visited_nodes and not is_within_bounds(current_coords):
        print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô {format_coords(current_coords)} ‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà!")
        raise ValueError("Start coordinate is out of bounds.")
    # =======================================================================
    # ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï
    # =======================================================================

    # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏ß‡∏à (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á) ---

    visited_nodes.add(current_coords)
    key = (round(current_coords[0], 2), round(current_coords[1], 2))
    if key not in coord_to_node_id:
        node_id = maze_graph.add_node(key[0], key[1])
        coord_to_node_id[key] = node_id
    else:
        node_id = coord_to_node_id[key]
        print(f"üîç ‡∏û‡∏ö‡πÇ‡∏´‡∏ô‡∏î‡πÄ‡∏î‡∏¥‡∏°: ID={node_id} ‡∏ó‡∏µ‡πà {format_coords(key)}")

    if current_coords in scan_memory:
        available_ways = scan_memory[current_coords]
        print(f"\nüß† ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏µ‡πà {format_coords(current_coords)}, ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏Å‡πà‡∏≤: {available_ways}")
        if not maze_graph.nodes[node_id].blocked_directions:
            maze_graph.add_blocked_direction_to_node(node_id, available_ways)
    else:
        print(f"\nüìç ‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà: {format_coords(current_coords)}. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÅ‡∏Å‡∏ô...")
        tof_readings.clear()
        time.sleep(0.2)
        # correct_robot_orientation( target_yaw=0)
        available_ways, marker = move_gimbal(ep_gimbal, ep_chassis, ep_vision, ep_camera)
        # correct_robot_orientation( target_yaw=0)
        scan_memory[current_coords] = available_ways
        print(f"üî¨ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: {available_ways}")
        maze_graph.add_blocked_direction_to_node(node_id, available_ways)
        maze_graph.add_marker_direction_to_node(node_id, marker)

    direction_map = [
        {'name': 'left',     'direction': 'y-', 'coords': (0, -STEP_SIZE), 'gimbal_yaw': -90},
        {'name': 'forward',  'direction': 'x+', 'coords': (STEP_SIZE, 0), 'gimbal_yaw': 0},
        {'name': 'right',    'direction': 'y+', 'coords': (0, STEP_SIZE), 'gimbal_yaw': 90},
        {'name': 'backward', 'direction': 'x-', 'coords': (-STEP_SIZE, 0), 'gimbal_yaw': 180},
    ]

    # --- ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏ß‡∏à (‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö) ---
    for i, direction_info in enumerate(direction_map):
        # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏•‡∏™‡πÅ‡∏Å‡∏ô‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if available_ways[i] == 1:
            d_coords = direction_info['coords']
            next_coords = (round(current_coords[0] + d_coords[0], 2), round(current_coords[1] + d_coords[1], 2))

            # 2. **‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ "‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà**
            if not is_within_bounds(next_coords):
                print(f"  -- üó∫Ô∏è  ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á {direction_info['name']} ‡πÑ‡∏õ‡∏¢‡∏±‡∏á {format_coords(next_coords)} ‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï! (‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å)")
                continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡πà‡∏≠

            # 3. **‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ "‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà**
            if next_coords in visited_nodes:
                print(f"  -- üìå ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á {direction_info['name']} ‡πÑ‡∏õ‡∏¢‡∏±‡∏á {format_coords(next_coords)} ‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ...")
                # (‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß)
                next_key = (round(next_coords[0], 2), round(next_coords[1], 2))
                if next_key in coord_to_node_id:
                    current_node_id = coord_to_node_id[key]
                    next_node_id = coord_to_node_id[next_key]
                    if next_node_id not in maze_graph.nodes[current_node_id].connections:
                        distance = math.sqrt((next_coords[0] - current_coords[0])**2 + (next_coords[1] - current_coords[1])**2)
                        maze_graph.add_edge(current_node_id, next_node_id, distance)
                continue # ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ

            # 4. **‡∏ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà**
            print(f"  -> üë£ ‡∏™‡πÑ‡∏•‡∏î‡πå {direction_info['name']} ‡πÑ‡∏õ‡∏¢‡∏±‡∏á {format_coords(next_coords)}...")

            # (‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
            next_key = (round(next_coords[0], 2), round(next_coords[1], 2))
            if next_key not in coord_to_node_id:
                next_node_id = maze_graph.add_node(next_key[0], next_key[1])
                coord_to_node_id[next_key] = next_node_id
            else:
                next_node_id = coord_to_node_id[next_key]

            current_node_id = coord_to_node_id[key]
            if next_node_id not in maze_graph.nodes[current_node_id].connections:
                distance = math.sqrt((next_coords[0] - current_coords[0])**2 + (next_coords[1] - current_coords[1])**2)
                maze_graph.add_edge(current_node_id, next_node_id, distance)

            gimbal_yaw = direction_info['gimbal_yaw']
            ep_gimbal.moveto(pitch=-6, yaw=gimbal_yaw, pitch_speed=200, yaw_speed=200).wait_for_completed()
            time.sleep(0.1)

            # correct_robot_orientation( target_yaw=0)
            move_direction_pid_with_emergency_brake(ep_chassis, direction_info['direction'], STEP_SIZE)
            
            correct_robot_orientation( target_yaw=0)

            explore_from(next_coords, ep_chassis, ep_gimbal, ep_vision, ep_camera)

            print(f"  <- ‚è™ ‡∏™‡πÑ‡∏•‡∏î‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å {format_coords(next_coords)} ‡∏°‡∏≤‡∏¢‡∏±‡∏á {format_coords(current_coords)}...")

            reverse_direction_map = {'x+': 'x-', 'x-': 'x+', 'y+': 'y-', 'y-': 'y+'}
            reverse_gimbal_map = {'x+': 180, 'x-': 0, 'y+': -90, 'y-': 90}
            reverse_direction = reverse_direction_map[direction_info['direction']]
            reverse_gimbal_yaw = reverse_gimbal_map[direction_info['direction']]

            ep_gimbal.moveto(pitch=-6, yaw=reverse_gimbal_yaw, pitch_speed=200, yaw_speed=200).wait_for_completed()
            time.sleep(0.1)

            # correct_robot_orientation( target_yaw=0)
            move_direction_pid_with_emergency_brake(ep_chassis, reverse_direction, STEP_SIZE)
            # correct_robot_orientation( target_yaw=0)
            available_ways2, marker = move_gimbal(ep_gimbal, ep_chassis, ep_vision, ep_camera)
            # correct_robot_orientation( target_yaw=0)

            
            time.sleep(0.1)

    print(f"‚úÖ ‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏à‡∏≤‡∏Å {format_coords(current_coords)} ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÅ‡∏Ç‡∏ô‡∏á‡πÅ‡∏•‡πâ‡∏ß")
from robomaster import camera

if __name__ == '__main__':
    ep_robot = robot.Robot()
    ep_robot.initialize(conn_type="ap")

    ep_gimbal = ep_robot.gimbal
    ep_sensor = ep_robot.sensor
    ep_chassis = ep_robot.chassis
    ep_vision = ep_robot.vision
    ep_camera = ep_robot.camera

    print("===== ü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏ß‡∏à‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ DFS + PID Movement + ToF Median Filter + Map System =====")
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° subscription ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PID ‡πÅ‡∏•‡∏∞ attitude
    ep_sensor.sub_distance(freq=50, callback=sub_data_distance)  # **ToF ‡∏Å‡∏±‡∏ö median filter**
    ep_chassis.sub_position(freq=50, callback=sub_chassis_position)
    ep_chassis.sub_attitude(freq=50, callback=sub_chassis_attitude)
    ep_gimbal.sub_angle(freq=50, callback=sub_data_angle)
    # ep_camera.start_video_stream(display=True, resolution=camera.STREAM_360P)  # **‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á**
    ep_vision.sub_detect_info(name="marker", callback=on_detect_marker)
    
    time.sleep(0.5)  # **‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡πÉ‡∏´‡πâ median filter buffer ‡πÄ‡∏ï‡∏¥‡∏°**

    print(f"üîß Median Filter ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß (buffer size: {tof_readings.maxlen})")
    print(f"üó∫Ô∏è  Map System ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß")

    try:
        start_node = (0, 0)
        explore_from(start_node, ep_chassis, ep_gimbal, ep_vision, ep_camera)

        
        # **‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏°‡∏û‡∏´‡∏•‡∏±‡∏á‡∏™‡∏≥‡∏£‡∏ß‡∏à‡πÄ‡∏™‡∏£‡πá‡∏à**
        print("\n" + "="*60)
        print("üó∫Ô∏è  ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏°‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô")
        print("="*60)
        print(f"üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏´‡∏ô‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(maze_graph.nodes)}")
        print(f"üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {sum(len(node.connections) for node in maze_graph.nodes.values()) // 2}")
        
        print("\nüìç ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏´‡∏ô‡∏î:")
        import csv

        with open("maze_nodes.csv", "w", newline="") as f:
            writer = csv.writer(f)
            writer.writerow(["node_id", "x", "y", "blocked_directions"])
            for node_id, node in maze_graph.nodes.items():
                blocked = node.blocked_directions
                marker = node.marker_directions
                print(f"   ‡πÇ‡∏´‡∏ô‡∏î {node_id}: ({node.x:.2f}, {node.y:.2f})")
                print(f"     - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÅ‡∏Å‡∏ô: {blocked}")  # [y-, x+, y+, x-]
                print(f"     - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÅ‡∏Å‡∏ô marker: {marker}")
                writer.writerow([
                    node_id,
                    f"{node.x:.3f}",
                    f"{node.y:.3f}",
                    repr(blocked)
                ])
        print("="*60)
        
    except KeyboardInterrupt:
        print("\n===== ‚èπÔ∏è ‡∏ñ‡∏π‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏£‡∏±‡∏û‡∏ó‡πå: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏°‡∏û‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö =====")
        with open("maze_nodes.csv", "w", newline="") as f:
            writer = csv.writer(f)
            writer.writerow(["node_id", "x", "y", "blocked_directions"])
            for node_id, node in maze_graph.nodes.items():
                blocked = node.blocked_directions
                marker = node.marker_directions
                print(f"   ‡πÇ‡∏´‡∏ô‡∏î {node_id}: ({node.x:.2f}, {node.y:.2f})")
                print(f"     - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÅ‡∏Å‡∏ô: {blocked}")  # [y-, x+, y+, x-]
                print(f"     - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÅ‡∏Å‡∏ô marker: {marker}")
                writer.writerow([
                    node_id,
                    f"{node.x:.3f}",
                    f"{node.y:.3f}",
                    repr(blocked)
                ])
    finally:
        print("\n===== ‚èπÔ∏è ‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏ß‡∏à‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö =====")
        ep_sensor.unsub_distance()
        ep_chassis.unsub_position()
        ep_chassis.unsub_attitude()
        ep_vision.unsub_detect_info(name="marker")
        
        # ep_camera.stop_video_stream()
        time.sleep(1)
        ep_robot.close()
        with open("maze_nodes.csv", "w", newline="") as f:
            writer = csv.writer(f)
            writer.writerow(["node_id", "x", "y", "blocked_directions"])
            for node_id, node in maze_graph.nodes.items():
                blocked = node.blocked_directions
                marker = node.marker_directions
                print(f"   ‡πÇ‡∏´‡∏ô‡∏î {node_id}: ({node.x:.2f}, {node.y:.2f})")
                print(f"     - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÅ‡∏Å‡∏ô: {blocked}")  # [y-, x+, y+, x-]
                print(f"     - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÅ‡∏Å‡∏ô marker: {marker}")
                writer.writerow([
                    node_id,
                    f"{node.x:.3f}",
                    f"{node.y:.3f}",
                    repr(blocked)
                ])