# -*-coding:utf-8-*-
# Copyright (c) 2020 DJI.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License in the file LICENSE.txt or at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import time
import robomaster
from robomaster import robot
import math

latest_gimbal_angle = [0, 0, 0, 0]
lastest_distance = [0, 0, 0, 0]

def sub_data_angle(angle_info):
    global latest_gimbal_angle
    latest_gimbal_angle = angle_info

def sub_data_distance(sub_info):
    global lastest_distance
    lastest_distance = sub_info

def move_gimbal(ep_gimbal,ep_chassis):
    way = [0,0,0]

    # ‡∏´‡∏±‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
    ep_gimbal.moveto(pitch=-10, yaw=-90, pitch_speed=200, yaw_speed=200).wait_for_completed()
    print("‡∏´‡∏±‡∏ô‡∏ã‡πâ‡∏≤‡∏¢",lastest_distance[0])
    if lastest_distance[0] < 200 :
        way[0] = 0 #‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô
        ep_chassis.move(x=0, y=(200-lastest_distance[0])/1000, z=0, xy_speed=1.5).wait_for_completed()
    elif lastest_distance[0] < 400:
        way[0] = 0 #‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô
        ep_chassis.move(x=0, y=((lastest_distance[0])-200)/1000, z=0, xy_speed=1.5).wait_for_completed()
    else:
        way[0] = 1 #‡∏ó‡∏≤‡∏á‡πÑ‡∏Å‡∏•

    # ‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    ep_gimbal.moveto(pitch=-10, yaw=0, pitch_speed=100, yaw_speed=100).wait_for_completed()
    print("‡∏´‡∏±‡∏ô‡∏Å‡∏•‡∏≤‡∏á",lastest_distance[0])
    if lastest_distance[0] < 200 :
        way[1] = 0 #‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô
        ep_chassis.move(x=-(abs(200-lastest_distance[0])/1000), y=0, z=0, xy_speed=1.5).wait_for_completed()
    elif lastest_distance[0] < 400:    
        way[1] = 0 #‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô
        ep_chassis.move(x=(abs(200-lastest_distance[0])/1000), y=0, z=0, xy_speed=1.5).wait_for_completed()
    else:
        way[1] = 1 #‡∏ó‡∏≤‡∏á‡πÑ‡∏Å‡∏•

    # ‡∏´‡∏±‡∏ô‡∏Ç‡∏ß‡∏≤
    ep_gimbal.moveto(pitch=-10, yaw=90, pitch_speed=200, yaw_speed=200).wait_for_completed()
    print("‡∏´‡∏±‡∏ô‡∏Ç‡∏ß‡∏≤",lastest_distance[0])
    if lastest_distance[0] < 200 :
        way[2] = 0 #‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô
        ep_chassis.move(x=0, y=-(abs(200-lastest_distance[0])/1000), z=0, xy_speed=1.5).wait_for_completed()
    elif lastest_distance[0] < 400:    
        way[2] = 0 #‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô
        ep_chassis.move(x=0, y=(abs(200-lastest_distance[0])/1000), z=0, xy_speed=1.5).wait_for_completed()   
    else:
        way[2] = 1 #‡∏ó‡∏≤‡∏á‡πÑ‡∏Å‡∏•

    # ‡∏´‡∏±‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    ep_gimbal.moveto(pitch=-10, yaw=0, pitch_speed=200, yaw_speed=200).wait_for_completed()
    return way


def convert_gimbal_result_to_blocked_directions(way_result, current_facing_direction='x+'):
    """
    ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å move_gimbal ‡πÄ‡∏õ‡πá‡∏ô blocked directions ‡∏ï‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ
    
    Args:
        way_result (list): [‡∏ã‡πâ‡∏≤‡∏¢, ‡∏´‡∏ô‡πâ‡∏≤, ‡∏Ç‡∏ß‡∏≤] (0=‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô, 1=‡∏ó‡∏≤‡∏á‡∏ß‡πà‡∏≤‡∏á) ‡∏à‡∏≤‡∏Å move_gimbal  
        current_facing_direction (str): ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ
    
    Returns:
        list: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ['x-', 'y+']
    """
    blocked_directions = []
    
    # ‡πÅ‡∏°‡∏õ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå
    direction_map = {
        'y+': {'left': 'x-', 'front': 'y+', 'right': 'x+'},  # ‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠
        'x+': {'left': 'y+', 'front': 'x+', 'right': 'y-'},  # ‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å
        'y-': {'left': 'x+', 'front': 'y-', 'right': 'x-'},  # ‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ï‡πâ
        'x-': {'left': 'y-', 'front': 'x-', 'right': 'y+'}   # ‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å
    }
    
    direction_names = {
        'x+': '‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å', 'x-': '‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å', 
        'y+': '‡∏ó‡∏¥‡∏®‡πÄ‡∏´‡∏ô‡∏∑‡∏≠', 'y-': '‡∏ó‡∏¥‡∏®‡πÉ‡∏ï‡πâ'
    }
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
    positions = ['left', 'front', 'right']
    position_names = ['‡∏ã‡πâ‡∏≤‡∏¢', '‡∏´‡∏ô‡πâ‡∏≤', '‡∏Ç‡∏ß‡∏≤']
    
    print(f"üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô:")
    print(f"   - ‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏¥‡∏®: {current_facing_direction}")
    print(f"   - ‡∏ú‡∏•‡∏™‡πÅ‡∏Å‡∏ô [‡∏ã‡πâ‡∏≤‡∏¢, ‡∏´‡∏ô‡πâ‡∏≤, ‡∏Ç‡∏ß‡∏≤]: {way_result}")
    print(f"   - (0=‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô, 1=‡∏ó‡∏≤‡∏á‡∏ß‡πà‡∏≤‡∏á)")
    
    for i, position in enumerate(positions):
        direction_key = direction_map[current_facing_direction][position]
        
        if way_result[i] == 0:  # ‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô
            blocked_directions.append(direction_key)
            print(f"üö´ {position_names[i]} ‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô -> {direction_key} ({direction_names[direction_key]})")
        else:  # ‡∏ó‡∏≤‡∏á‡∏ß‡πà‡∏≤‡∏á
            print(f"‚úÖ {position_names[i]} ‡∏ó‡∏≤‡∏á‡∏ß‡πà‡∏≤‡∏á -> {direction_key} ({direction_names[direction_key]})")
    
    return blocked_directions

def detect_walls_with_gimbal(ep_robot, current_facing_direction='x+'):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡∏î‡πâ‡∏ß‡∏¢ gimbal ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô blocked directions
    
    Args:
        ep_robot: robot object ‡∏ó‡∏µ‡πà initialized ‡πÅ‡∏•‡πâ‡∏ß
        current_facing_direction (str): ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ
    
    Returns:
        list: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ['x-', 'y+']
    """
    print(f"üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡∏î‡πâ‡∏ß‡∏¢ gimbal (‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ: {current_facing_direction})")
    
    # Initialize ‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
    ep_gimbal, ep_sensor, ep_chassis = initialize_sensors(ep_robot)
    
    try:
        # ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô move_gimbal ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        way_result = move_gimbal(ep_gimbal, ep_chassis)
        print(f"üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö [‡∏Ç‡∏ß‡∏≤, ‡∏´‡∏ô‡πâ‡∏≤, ‡∏ã‡πâ‡∏≤‡∏¢]: {way_result}")

        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô blocked directions
        blocked_directions = convert_gimbal_result_to_blocked_directions(way_result, current_facing_direction)
        
        if blocked_directions:
            print(f"üö´ ‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏ö: {blocked_directions}")
        else:
            print("‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô")
        
        return way_result,blocked_directions
        
    finally:
        # ‡∏õ‡∏¥‡∏î‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
        cleanup_sensors(ep_gimbal, ep_sensor, ep_chassis)

def initialize_sensors(ep_robot):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö initialize ‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    
    Args:
        ep_robot: robot object ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å robot.Robot()
    
    Returns:
        tuple: (ep_gimbal, ep_sensor, ep_chassis)
    """
    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
    ep_gimbal = ep_robot.gimbal
    ep_sensor = ep_robot.sensor
    ep_chassis = ep_robot.chassis
    
    # subscribe ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
    ep_gimbal.sub_angle(freq=10, callback=sub_data_angle)
    ep_sensor.sub_distance(freq=10, callback=sub_data_distance)
    
    # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°
    time.sleep(0.5)
    
    print("‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    
    return ep_gimbal, ep_sensor, ep_chassis

def cleanup_sensors(ep_gimbal, ep_sensor, ep_chassis):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
    """
    try:
        ep_gimbal.unsub_angle()
        ep_sensor.unsub_distance()
        print("‡∏õ‡∏¥‡∏î‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå: {e}")

def check_walls_around(ep_robot):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backward compatibility
    
    Args:
        ep_robot: robot object ‡∏ó‡∏µ‡πà initialized ‡πÅ‡∏•‡πâ‡∏ß
    
    Returns:
        list: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á 3 ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á [‡∏ã‡πâ‡∏≤‡∏¢, ‡∏´‡∏ô‡πâ‡∏≤, ‡∏Ç‡∏ß‡∏≤]
    """
    # Initialize ‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
    ep_gimbal, ep_sensor, ep_chassis = initialize_sensors(ep_robot)
    
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏≤‡∏á‡πÑ‡∏õ
        way_result = move_gimbal(ep_gimbal, ep_chassis)
        
        return way_result
        
    finally:
        # ‡∏õ‡∏¥‡∏î‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
        cleanup_sensors(ep_gimbal, ep_sensor, ep_chassis)

# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
if __name__ == '__main__':
    ep_robot = robot.Robot()
    ep_robot.initialize(conn_type="ap")

    try:
        # ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
        ep_chassis = ep_robot.chassis
        ep_chassis.move(x=0.6, y=0, z=0, xy_speed=0.5).wait_for_completed()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô blocked directions
        blocked_dirs = detect_walls_with_gimbal(ep_robot, 'y+')
        print("‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô:", blocked_dirs)
        
    finally:
        ep_robot.close()