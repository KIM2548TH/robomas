# -*-coding:utf-8-*-
import math
import heapq

class Node:
    def __init__(self, node_id, x, y, is_exit=False):
        self.id = node_id
        self.x = x
        self.y = y
        self.is_exit = is_exit
        self.connections = {}  # {neighbor_id: distance}
        
        # **‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô**
        self.blocked_directions = set()  # ‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô
        # ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á: 'north', 'south', 'east', 'west'
    
    def add_blocked_direction(self, direction):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô"""
        valid_directions = {'north', 'south', 'east', 'west'}
        if direction.lower() in valid_directions:
            self.blocked_directions.add(direction.lower())
            print(f"üö´ ‡πÇ‡∏´‡∏ô‡∏î {self.id}: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô {direction}")
    
    def remove_blocked_direction(self, direction):
        """‡∏•‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô"""
        if direction.lower() in self.blocked_directions:
            self.blocked_directions.remove(direction.lower())
            print(f"‚úÖ ‡πÇ‡∏´‡∏ô‡∏î {self.id}: ‡∏•‡∏ö‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô {direction}")
    
    def is_blocked_direction(self, direction):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return direction.lower() in self.blocked_directions
    
    def get_available_directions(self):
        """‡∏î‡∏∂‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÑ‡∏õ‡πÑ‡∏î‡πâ"""
        all_directions = {'north', 'south', 'east', 'west'}
        return all_directions - self.blocked_directions
    
    def __repr__(self):
        blocked_str = f", blocked={list(self.blocked_directions)}" if self.blocked_directions else ""
        return f"Node(id={self.id}, pos=({self.x},{self.y}), exit={self.is_exit}{blocked_str})"

class Graph:
    def __init__(self):
        self.nodes = {}
        self.node_count = 0

    def add_node(self, x, y, is_exit=False, blocked_directions=None):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏ô‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô"""
        new_id = self.node_count
        new_node = Node(new_id, x, y, is_exit)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if blocked_directions:
            for direction in blocked_directions:
                new_node.add_blocked_direction(direction)
        
        self.nodes[new_id] = new_node
        self.node_count += 1
        print(f"üìç ‡∏û‡∏ö‡πÇ‡∏´‡∏ô‡∏î‡πÉ‡∏´‡∏°‡πà: {new_node}")
        return new_id
    
    def add_blocked_direction_to_node(self, node_id, direction):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏ô‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"""
        if node_id in self.nodes:
            self.nodes[node_id].add_blocked_direction(direction)
        else:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏´‡∏ô‡∏î {node_id}")

    def add_edge(self, node1_id, node2_id, distance):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏´‡∏ô‡∏î‡∏™‡∏≠‡∏á‡πÇ‡∏´‡∏ô‡∏î"""
        if node1_id in self.nodes and node2_id in self.nodes:
            self.nodes[node1_id].connections[node2_id] = distance
            self.nodes[node2_id].connections[node1_id] = distance
            print(f"üîó ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÇ‡∏´‡∏ô‡∏î {node1_id} <-> {node2_id} (‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á: {distance})")
        else:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏´‡∏ô‡∏î {node1_id} ‡πÅ‡∏•‡∏∞ {node2_id} ‡πÑ‡∏î‡πâ")

def calculate_direction(from_node, to_node):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏ô‡∏î‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÑ‡∏õ‡∏≠‡∏µ‡∏Å‡πÇ‡∏´‡∏ô‡∏î‡∏´‡∏ô‡∏∂‡πà‡∏á"""
    dx = to_node.x - from_node.x
    dy = to_node.y - from_node.y
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
    if abs(dx) > abs(dy):
        return 'east' if dx > 0 else 'west'
    else:
        return 'north' if dy > 0 else 'south'

def heuristic(node1, node2):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡∏¢‡∏∏‡∏Ñ‡∏•‡∏¥‡∏î"""
    return math.sqrt((node1.x - node2.x)**2 + (node1.y - node2.y)**2)

def a_star_search(graph, start_id, goal_id):
    """A* search algorithm ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô"""
    if start_id not in graph.nodes or goal_id not in graph.nodes:
        print(f"‚ùå ‡πÇ‡∏´‡∏ô‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ({start_id}) ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ({goal_id}) ‡πÑ‡∏°‡πà‡∏û‡∏ö")
        return None, 0
    
    start_node = graph.nodes[start_id]
    goal_node = graph.nodes[goal_id]
    
    open_set = [(0, start_id)]
    came_from = {}
    g_score = {start_id: 0}
    f_score = {start_id: heuristic(start_node, goal_node)}
    
    while open_set:
        current_f, current_id = heapq.heappop(open_set)
        
        if current_id == goal_id:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
            path = []
            total_distance = g_score[goal_id]
            
            while current_id in came_from:
                path.append(current_id)
                current_id = came_from[current_id]
            path.append(start_id)
            path.reverse()
            
            return path, total_distance
        
        current_node = graph.nodes[current_id]
        
        for neighbor_id, edge_distance in current_node.connections.items():
            neighbor_node = graph.nodes[neighbor_id]
            
            # **‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô**
            direction_to_neighbor = calculate_direction(current_node, neighbor_node)
            if current_node.is_blocked_direction(direction_to_neighbor):
                print(f"üö´ ‡∏Ç‡πâ‡∏≤‡∏°: {current_id} -> {neighbor_id} (‡∏ó‡∏¥‡∏® {direction_to_neighbor} ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô)")
                continue
            
            tentative_g_score = g_score[current_id] + edge_distance
            
            if neighbor_id not in g_score or tentative_g_score < g_score[neighbor_id]:
                came_from[neighbor_id] = current_id
                g_score[neighbor_id] = tentative_g_score
                f_score[neighbor_id] = tentative_g_score + heuristic(neighbor_node, goal_node)
                
                if (f_score[neighbor_id], neighbor_id) not in open_set:
                    heapq.heappush(open_set, (f_score[neighbor_id], neighbor_id))
    
    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å {start_id} ‡πÑ‡∏õ {goal_id}")
    return None, 0