# -*-coding:utf-8-*-

# Copyright (c) 2020 DJI.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License in the file LICENSE.txt or at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import time
import robomaster
from robomaster import robot
from collections import deque
import statistics  # **‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö median filter**
import math
import numpy as np
import cv2

from controler.map import Graph  # **‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Graph**
from controler.movement_slide import (
    move_direction_pid, 
    move_direction_pid_wall, 
    sub_chassis_position, 
    sub_chassis_attitude,  # **‡πÄ‡∏û‡∏¥‡πà‡∏°**
    correct_robot_orientation,  # **‡πÄ‡∏û‡∏¥‡πà‡∏°**
    move_to_tile_center_from_walls
)

# --- ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ Global ---
STEP_SIZE = 0.6  # ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡πÄ‡∏°‡∏ï‡∏£)

# Global variables to store the latest sensor data from subscriptions
lastest_distance = [0] 

# **‡πÄ‡∏û‡∏¥‡πà‡∏°: Median Filter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ToF sensor**
tof_readings = deque(maxlen=5)  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 5 ‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
filtered_distance = [0]  # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏á

# Global variables for DFS state
visited_nodes = set()
scan_memory = {}  # !! ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô

# **‡πÄ‡∏û‡∏¥‡πà‡∏°: Map System**
maze_graph = Graph()  # ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏°‡∏û
coord_to_node_id = {}  # ‡πÅ‡∏°‡∏û‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Å‡∏±‡∏ö node_id


class MarkerInfo:

    def __init__(self, x, y, w, h, info):
        self._x = x
        self._y = y
        self._w = w
        self._h = h
        self._info = info

    @property
    def pt1(self):
        return int((self._x - self._w / 2) * 1280), int((self._y - self._h / 2) * 720)

    @property
    def pt2(self):
        return int((self._x + self._w / 2) * 1280), int((self._y + self._h / 2) * 720)

    @property
    def center(self):
        return int(self._x * 1280), int(self._y * 720)

    @property
    def text(self):
        return self._info


markers = []
def on_detect_marker(marker_info):
    x, y, w, h, info = marker_info[0]
    markers.append(MarkerInfo(x, y, w, h, info))
    print("marker:{0} x:{1}, y:{2}, w:{3}, h:{4}".format(info, x, y, w, h))

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Helper ---
def format_coords(coords):
    """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•"""
    return f"({coords[0]:.2f}, {coords[1]:.2f})"

def apply_median_filter(new_value):
    """
    ‡πÉ‡∏ä‡πâ Median Filter ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ToF
    
    Args:
        new_value (float): ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å ToF sensor
    
    Returns:
        float: ‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏ú‡πà‡∏≤‡∏ô median filter
    """
    global tof_readings, filtered_distance
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤ buffer
    tof_readings.append(new_value)
    
    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 3 ‡∏Ñ‡πà‡∏≤ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ median
    if len(tof_readings) >= 3:
        filtered_value = statistics.median(tof_readings)
    else:
        # ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≠‡∏¢ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        filtered_value = sum(tof_readings) / len(tof_readings)
    
    filtered_distance[0] = filtered_value
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏°‡∏≤‡∏Å)
    # if abs(new_value - filtered_value) > 50:
    #     # print(f"üîß ToF Filter: raw={new_value:.0f}mm -> filtered={filtered_value:.0f}mm (buffer: {list(tof_readings)})")
    
    return filtered_value

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Subscription ---
def sub_data_distance(sub_info):
    """Callback function to update the latest distance from the sensor with median filter."""
    global lastest_distance
    
    raw_distance = sub_info[0]
    
    # **‡πÉ‡∏ä‡πâ median filter ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•**
    filtered_value = apply_median_filter(raw_distance)
    lastest_distance[0] = filtered_value

def get_stable_distance_reading():
    """
    ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÅ‡∏ö‡∏ö stable ‡πÇ‡∏î‡∏¢‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
    
    Returns:
        float: ‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà stable
    """
    stable_readings = []

    # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ 11 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    for i in range(11):
        stable_readings.append(lastest_distance[0])
        time.sleep(0.02)  # ‡∏£‡∏≠ 20ms
    
    # ‡πÉ‡∏ä‡πâ median ‡∏Ç‡∏≠‡∏á 5 ‡∏Ñ‡πà‡∏≤
    stable_value = statistics.median(stable_readings)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
    variance = max(stable_readings) - min(stable_readings)
    if variance > 100:  # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡∏ú‡∏±‡∏ô‡πÅ‡∏õ‡∏£‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 10cm
        print(f"‚ö†Ô∏è  ToF ‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£: variance={variance:.0f}mm, readings={stable_readings}")
    
    return stable_value

def checkmarkers(i,marker,ep_vision,x,qua, adjust_distance,ep_chassis):
    global markers
    markers.clear()
    ep_gimbal.moveto(pitch=-360, yaw=x, pitch_speed=350, yaw_speed=350).wait_for_completed()
    ep_vision.sub_detect_info(name="marker", callback=on_detect_marker)
    stable_distance = get_stable_distance_reading()
    time.sleep(0.25)  # *‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå stable*

    if markers:
        print(f"üìç ‡∏û‡∏ö Marker ‡∏ó‡∏µ‡πà‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢: {markers[0].text}")
        marker[i] = markers[0].text  # *‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Marker*
        
        # ep_vision.unsub_detect_info(name="marker")
    else:
        # markers.clear()
        move_direction_pid_wall(ep_chassis, qua, (stable_distance-230)/1000)
        ep_gimbal.moveto(pitch=-4, yaw=x, pitch_speed=350, yaw_speed=350).wait_for_completed()
        ep_gimbal.moveto(pitch=-360, yaw=x, pitch_speed=350, yaw_speed=350).wait_for_completed()
        # ep_vision.sub_detect_info(name="marker", callback=on_detect_marker)

        time.sleep(0.05)
        if markers:
            print(f"üìç ‡∏û‡∏ö Marker ‡∏ó‡∏µ‡πà‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢: {markers[0].text}")
            marker[i] = markers[0].text  # *‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Marker*
        else:
            print(f"üìç ‡πÑ‡∏°‡πà‡∏û‡∏ö Marker !!!!!!!!!!!!!!")
        
        # ep_chassis.move(x=-0.05, y=0, z=0, xy_speed=0.7).wait_for_completed()
        stable_distance = get_stable_distance_reading()
        move_direction_pid_wall(ep_chassis, qua, (stable_distance-200)/1000)
    
    ep_vision.unsub_detect_info(name="marker")

def detect_red_color(ep_camera):
    time.sleep(0.5)
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á Robomaster
    Args:
        ep_camera (robomaster.camera): camera module ‡∏Ç‡∏≠‡∏á Robomaster
    Returns:
        bool: True ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏™‡∏µ‡πÅ‡∏î‡∏á, False ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö
    """
    img = ep_camera.read_cv2_image()
    if img is None:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
        return False

    # ‡∏•‡∏î noise
    img_blur = cv2.GaussianBlur(img, (5, 5), 0)

    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô HSV
    hsv_img = cv2.cvtColor(img_blur, cv2.COLOR_BGR2HSV)

    # ‡∏ä‡πà‡∏ß‡∏á‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÅ‡∏ö‡∏ö‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
    lower_red1 = np.array([0, 80, 80])    # Hue ‡∏ï‡πà‡∏≥, ‡πÄ‡∏û‡∏¥‡πà‡∏° S/V ‡πÉ‡∏´‡πâ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
    upper_red1 = np.array([10, 255, 255])

    lower_red2 = np.array([170, 80, 80])  # Hue ‡∏™‡∏π‡∏á
    upper_red2 = np.array([180, 255, 255])

    mask1 = cv2.inRange(hsv_img, lower_red1, upper_red1)
    mask2 = cv2.inRange(hsv_img, lower_red2, upper_red2)

    final_mask = mask1 + mask2

    # ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡πÉ‡∏ô mask
    kernel = np.ones((5, 5), np.uint8)
    final_mask = cv2.morphologyEx(final_mask, cv2.MORPH_CLOSE, kernel)
    final_mask = cv2.morphologyEx(final_mask, cv2.MORPH_OPEN, kernel)

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö pixel ‡∏™‡∏µ‡πÅ‡∏î‡∏á
    red_pixels = np.count_nonzero(final_mask)
    if red_pixels > 5000:  # ‡∏õ‡∏£‡∏±‡∏ö threshold ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        print(f"‚úÖ ‡∏û‡∏ö‡∏™‡∏µ‡πÅ‡∏î‡∏á ({red_pixels} pixels)")
        return True
    else:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏µ‡πÅ‡∏î‡∏á ({red_pixels} pixels)")
        return False



# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πÅ‡∏Å‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏î‡πâ‡∏ß‡∏¢ Median Filter ---
def move_gimbal(ep_gimbal, ep_chassis, ep_vision, ep_camera):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πÅ‡∏Å‡∏ô 4 ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á + Median Filter + ‡∏õ‡∏£‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ way, marker, tof_wall
    """
    way = [0, 0, 0, 0]         # [‡∏ã‡πâ‡∏≤‡∏¢, ‡∏´‡∏ô‡πâ‡∏≤, ‡∏Ç‡∏ß‡∏≤, ‡∏´‡∏•‡∏±‡∏á]
    marker = ["No"] * 4        # [‡∏ã‡πâ‡∏≤‡∏¢, ‡∏´‡∏ô‡πâ‡∏≤, ‡∏Ç‡∏ß‡∏≤, ‡∏´‡∏•‡∏±‡∏á]
    tof_wall = [None] * 4      # [‡∏ã‡πâ‡∏≤‡∏¢, ‡∏´‡∏ô‡πâ‡∏≤, ‡∏Ç‡∏ß‡∏≤, ‡∏´‡∏•‡∏±‡∏á]

    print("üß≠ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πÅ‡∏Å‡∏ô...")
    correct_robot_orientation(ep_chassis, target_yaw=0)
    time.sleep(0.05)

    # ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏ô‡∏•‡∏π‡∏õ
    scan_info = [
        {'yaw': -90, 'dir': 'y+', 'idx': 0, 'marker_yaw': -90},
        {'yaw': 0,   'dir': 'x+', 'idx': 1, 'marker_yaw': 0},
        {'yaw': 90,  'dir': 'y-', 'idx': 2, 'marker_yaw': 90},
        {'yaw': 180, 'dir': 'x-', 'idx': 3, 'marker_yaw': 180},
    ]
    for info in scan_info:
        ep_gimbal.moveto(pitch=-6, yaw=info['yaw'], pitch_speed=350, yaw_speed=350).wait_for_completed()
        time.sleep(0.05)
        stable_distance = get_stable_distance_reading()
        print(f"‡∏´‡∏±‡∏ô {info['yaw']}¬∞: stable={stable_distance:.0f}mm")
        idx = info['idx']
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≥‡πÅ‡∏û‡∏á
        if stable_distance < 600:
            way[idx] = 0
            tof_wall[idx] = stable_distance / 1000  # mm -> m
            # checkmarkers(0,marker,ep_vision,-90, 'y+', adjust_distance,ep_chassis)
            # ... (‡πÉ‡∏™‡πà‡πÇ‡∏Ñ‡πâ‡∏î marker detection ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ) ...
        else:
            way[idx] = 1
            tof_wall[idx] = None

    # ‡∏´‡∏±‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    ep_gimbal.moveto(pitch=-6, yaw=0, pitch_speed=500, yaw_speed=500).wait_for_completed()
    time.sleep(0.05)
    correct_robot_orientation(ep_chassis, target_yaw=0)

    print(f"üìä way: {way}")
    print(f"üìä tof_wall: {tof_wall}")
    print(f"üìç marker: {marker}")
    return way, marker, tof_wall


# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏î‡πâ‡∏ß‡∏¢ DFS ---
def explore_from(current_coords, ep_chassis, ep_gimbal, ep_vision,ep_camera):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô DFS ‡∏´‡∏•‡∏±‡∏Å ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö Recursive ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏à‡∏≤‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    """
    global visited_nodes, scan_memory, maze_graph, coord_to_node_id

    # 1. ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏°‡∏≤‡πÄ‡∏¢‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    visited_nodes.add(current_coords)

    # **‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏≤‡πÇ‡∏´‡∏ô‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô**
    key = (round(current_coords[0], 2), round(current_coords[1], 2))
    if key not in coord_to_node_id:
        node_id = maze_graph.add_node(key[0], key[1])
        coord_to_node_id[key] = node_id
    else:
        node_id = coord_to_node_id[key]
        print(f"üîç ‡∏û‡∏ö‡πÇ‡∏´‡∏ô‡∏î‡πÄ‡∏î‡∏¥‡∏°: ID={node_id} ‡∏ó‡∏µ‡πà {format_coords(key)}")

    # 2. !! ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏°‡∏û
    if current_coords in scan_memory:
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏™‡πÅ‡∏Å‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
        available_ways = scan_memory[current_coords]
        print(f"\nüß† ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏µ‡πà {format_coords(current_coords)}, ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏Å‡πà‡∏≤: {available_ways}")
        
        # **‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÅ‡∏Å‡∏ô‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ**
        if not maze_graph.nodes[node_id].blocked_directions:
            maze_graph.add_blocked_direction_to_node(node_id, available_ways)
        
    else:
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•
        print(f"\nüìç ‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà: {format_coords(current_coords)}. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÅ‡∏Å‡∏ô...")
        
        # **‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï median filter buffer ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏´‡∏°‡πà**
        tof_readings.clear()
        time.sleep(0.1)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ buffer ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà

        available_ways,marker, tof_wall = move_gimbal(ep_gimbal, ep_chassis, ep_vision,ep_camera)
        move_to_tile_center_from_walls(ep_chassis, available_ways, marker, tof_wall, tile_size=0.4)
        correct_robot_orientation(ep_chassis, target_yaw=0)

        scan_memory[current_coords] = available_ways
        print(f"üî¨ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: {available_ways}")
        
        # **‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÅ‡∏Å‡∏ô**
        maze_graph.add_blocked_direction_to_node(node_id, available_ways)
        maze_graph.add_marker_direction_to_node(node_id, marker)


    # 3. ‡∏ô‡∏¥‡∏¢‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏°‡∏∏‡∏°‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏•
    direction_map = [
        {'name': 'left',     'direction': 'y-', 'coords': (0, -STEP_SIZE), 'gimbal_yaw': -90},   # ‡∏ã‡πâ‡∏≤‡∏¢ = y-, ‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏• -90¬∞
        {'name': 'forward',  'direction': 'x+', 'coords': (STEP_SIZE, 0), 'gimbal_yaw': 0},     # ‡∏´‡∏ô‡πâ‡∏≤ = x+, ‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏• 0¬∞
        {'name': 'right',    'direction': 'y+', 'coords': (0, STEP_SIZE), 'gimbal_yaw': 90},    # ‡∏Ç‡∏ß‡∏≤ = y+, ‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏• 90¬∞
        {'name': 'backward', 'direction': 'x-', 'coords': (-STEP_SIZE, 0), 'gimbal_yaw': 180},  # ‡∏´‡∏•‡∏±‡∏á = x-, ‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏• 180¬∞
    ]
    
    # 4. ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏™‡∏≥‡∏£‡∏ß‡∏à‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å available_ways
    for i, direction_info in enumerate(direction_map):
        if available_ways[i] == 1:
            d_coords = direction_info['coords']
            next_coords = (round(current_coords[0] + d_coords[0], 2), round(current_coords[1] + d_coords[1], 2))

            if next_coords not in visited_nodes:
                print(f"  -> üë£ ‡∏™‡πÑ‡∏•‡∏î‡πå {direction_info['name']} ‡πÑ‡∏õ‡∏¢‡∏±‡∏á {format_coords(next_coords)}...")
                
                # **‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏≤‡πÇ‡∏´‡∏ô‡∏î‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á**
                next_key = (round(next_coords[0], 2), round(next_coords[1], 2))
                if next_key not in coord_to_node_id:
                    next_node_id = maze_graph.add_node(next_key[0], next_key[1])
                    coord_to_node_id[next_key] = next_node_id
                else:
                    next_node_id = coord_to_node_id[next_key]
                
                # **‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á)**
                current_node_id = coord_to_node_id[key]
                if next_node_id not in maze_graph.nodes[current_node_id].connections:
                    distance = math.sqrt((next_coords[0] - current_coords[0])**2 + (next_coords[1] - current_coords[1])**2)
                    maze_graph.add_edge(current_node_id, next_node_id, distance)
                
                # **‡∏´‡∏±‡∏ô‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏•‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏î‡∏¥‡∏ô**
                gimbal_yaw = direction_info['gimbal_yaw']
                print(f"     üéØ ‡∏´‡∏±‡∏ô‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏•‡πÑ‡∏õ {gimbal_yaw}¬∞ ({direction_info['name']})")
                ep_gimbal.moveto(pitch=-6, yaw=gimbal_yaw, pitch_speed=350, yaw_speed=350).wait_for_completed()
                time.sleep(0.1)
                
                # ‡πÉ‡∏ä‡πâ PID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏£‡∏ß‡∏à
                move_direction_pid(ep_chassis, direction_info['direction'], STEP_SIZE)
                # available_ways2, marker, tof_wall = move_gimbal(ep_gimbal, ep_chassis, ep_vision, ep_camera)
                # move_to_tile_center_from_walls(ep_chassis, available_ways, marker, tof_wall, tile_size=0.4)

                explore_from(next_coords, ep_chassis, ep_gimbal,ep_vision,ep_camera)

                print(f"  <- ‚è™ ‡∏™‡πÑ‡∏•‡∏î‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å {format_coords(next_coords)} ‡∏°‡∏≤‡∏¢‡∏±‡∏á {format_coords(current_coords)}...")
                
                # **‡∏´‡∏±‡∏ô‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏•‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö**
                reverse_direction_map = {'x+': 'x-', 'x-': 'x+', 'y+': 'y-', 'y-': 'y+'}
                reverse_gimbal_map = {'x+': 180, 'x-': 0, 'y+': -90, 'y-': 90}  # ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
                
                reverse_direction = reverse_direction_map[direction_info['direction']]
                reverse_gimbal_yaw = reverse_gimbal_map[direction_info['direction']]
                
                print(f"     üîÑ ‡∏´‡∏±‡∏ô‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏•‡πÑ‡∏õ {reverse_gimbal_yaw}¬∞ (‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö)")
                ep_gimbal.moveto(pitch=-6, yaw=reverse_gimbal_yaw, pitch_speed=350, yaw_speed=350).wait_for_completed()
                time.sleep(0.1)
                
                # ‡πÉ‡∏ä‡πâ PID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
                move_direction_pid(ep_chassis, reverse_direction, STEP_SIZE)
                available_ways2, marker, tof_wall = move_gimbal(ep_gimbal, ep_chassis, ep_vision, ep_camera)
                move_to_tile_center_from_walls(ep_chassis, available_ways, marker, tof_wall, tile_size=0.4)
                correct_robot_orientation(ep_chassis, target_yaw=0)
                
                # **‡∏´‡∏±‡∏ô‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à**
                print(f"     üè† ‡∏´‡∏±‡∏ô‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (0¬∞)")
                ep_gimbal.moveto(pitch=-6, yaw=0, pitch_speed=350, yaw_speed=350).wait_for_completed()
                time.sleep(0.1)
                
            else:
                print(f"  -- ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á {direction_info['name']} ‡πÑ‡∏õ‡∏¢‡∏±‡∏á {format_coords(next_coords)} ‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ...")
                
                # **‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°**
                next_key = (round(next_coords[0], 2), round(next_coords[1], 2))
                if next_key in coord_to_node_id:
                    current_node_id = coord_to_node_id[key]
                    next_node_id = coord_to_node_id[next_key]
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
                    if next_node_id not in maze_graph.nodes[current_node_id].connections:
                        distance = math.sqrt((next_coords[0] - current_coords[0])**2 + (next_coords[1] - current_coords[1])**2)
                        maze_graph.add_edge(current_node_id, next_node_id, distance)
    
    print(f"‚úÖ ‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏à‡∏≤‡∏Å {format_coords(current_coords)} ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÅ‡∏Ç‡∏ô‡∏á‡πÅ‡∏•‡πâ‡∏ß")
from robomaster import camera

if __name__ == '__main__':
    ep_robot = robot.Robot()
    ep_robot.initialize(conn_type="ap")

    ep_gimbal = ep_robot.gimbal
    ep_sensor = ep_robot.sensor
    ep_chassis = ep_robot.chassis
    ep_vision = ep_robot.vision
    ep_camera = ep_robot.camera

    print("===== ü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏ß‡∏à‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ DFS + PID Movement + ToF Median Filter + Map System =====")
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° subscription ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PID ‡πÅ‡∏•‡∏∞ attitude
    ep_sensor.sub_distance(freq=50, callback=sub_data_distance)  # **ToF ‡∏Å‡∏±‡∏ö median filter**
    ep_chassis.sub_position(freq=50, callback=sub_chassis_position)
    ep_chassis.sub_attitude(freq=20, callback=sub_chassis_attitude)
    ep_camera.start_video_stream(display=True, resolution=camera.STREAM_360P)  # **‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á**
    
    time.sleep(0.5)  # **‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡πÉ‡∏´‡πâ median filter buffer ‡πÄ‡∏ï‡∏¥‡∏°**

    print(f"üîß Median Filter ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß (buffer size: {tof_readings.maxlen})")
    print(f"üó∫Ô∏è  Map System ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß")

    try:
        start_node = (0.0, 0.0)
        explore_from(start_node, ep_chassis, ep_gimbal, ep_vision, ep_camera)

        
        # **‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏°‡∏û‡∏´‡∏•‡∏±‡∏á‡∏™‡∏≥‡∏£‡∏ß‡∏à‡πÄ‡∏™‡∏£‡πá‡∏à**
        print("\n" + "="*60)
        print("üó∫Ô∏è  ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏°‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô")
        print("="*60)
        print(f"üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏´‡∏ô‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(maze_graph.nodes)}")
        print(f"üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {sum(len(node.connections) for node in maze_graph.nodes.values()) // 2}")
        
        print("\nüìç ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏´‡∏ô‡∏î:")
        for node_id, node in maze_graph.nodes.items():
            connections = list(node.connections.keys())
            blocked = node.blocked_directions
            marker = node.marker_directions
            print(f"   ‡πÇ‡∏´‡∏ô‡∏î {node_id}: ({node.x:.2f}, {node.y:.2f})")
            print(f"     - ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö: {connections}")
            print(f"     - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÅ‡∏Å‡∏ô: {blocked}")  # [y-, x+, y+, x-]
            print(f"     - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÅ‡∏Å‡∏ô marker: {marker}")
        print("="*60)
        
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    finally:
        print("\n===== ‚èπÔ∏è ‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏ß‡∏à‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö =====")
        ep_sensor.unsub_distance()
        ep_chassis.unsub_position()
        ep_chassis.unsub_attitude()
        
        ep_camera.stop_video_stream()
        time.sleep(1)
        ep_robot.close()