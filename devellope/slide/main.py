# -*-coding:utf-8-*-

# Copyright (c) 2020 DJI.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License in the file LICENSE.txt or at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import time
import robomaster
from robomaster import robot
from collections import deque
import statistics  # **‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö median filter**

from movement import (
    move_direction_pid, 
    move_direction_pid_wall, 
    sub_chassis_position, 
    sub_chassis_attitude,  # **‡πÄ‡∏û‡∏¥‡πà‡∏°**
    correct_robot_orientation  # **‡πÄ‡∏û‡∏¥‡πà‡∏°**
)

# --- ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ Global ---
STEP_SIZE = 0.7  # ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡πÄ‡∏°‡∏ï‡∏£)

# Global variables to store the latest sensor data from subscriptions
lastest_distance = [0] 

# **‡πÄ‡∏û‡∏¥‡πà‡∏°: Median Filter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ToF sensor**
tof_readings = deque(maxlen=5)  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 5 ‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
filtered_distance = [0]  # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏á

# Global variables for DFS state
visited_nodes = set()
scan_memory = {}  # !! ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Helper ---
def format_coords(coords):
    """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•"""
    return f"({coords[0]:.2f}, {coords[1]:.2f})"

def apply_median_filter(new_value):
    """
    ‡πÉ‡∏ä‡πâ Median Filter ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ToF
    
    Args:
        new_value (float): ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å ToF sensor
    
    Returns:
        float: ‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏ú‡πà‡∏≤‡∏ô median filter
    """
    global tof_readings, filtered_distance
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤ buffer
    tof_readings.append(new_value)
    
    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 3 ‡∏Ñ‡πà‡∏≤ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ median
    if len(tof_readings) >= 3:
        filtered_value = statistics.median(tof_readings)
    else:
        # ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≠‡∏¢ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        filtered_value = sum(tof_readings) / len(tof_readings)
    
    filtered_distance[0] = filtered_value
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏°‡∏≤‡∏Å)
    if abs(new_value - filtered_value) > 50:
        print(f"üîß ToF Filter: raw={new_value:.0f}mm -> filtered={filtered_value:.0f}mm (buffer: {list(tof_readings)})")
    
    return filtered_value

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Subscription ---
def sub_data_distance(sub_info):
    """Callback function to update the latest distance from the sensor with median filter."""
    global lastest_distance
    
    raw_distance = sub_info[0]
    
    # **‡πÉ‡∏ä‡πâ median filter ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•**
    filtered_value = apply_median_filter(raw_distance)
    lastest_distance[0] = filtered_value

def get_stable_distance_reading():
    """
    ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÅ‡∏ö‡∏ö stable ‡πÇ‡∏î‡∏¢‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
    
    Returns:
        float: ‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà stable
    """
    stable_readings = []
    
    # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    for i in range(5):
        stable_readings.append(lastest_distance[0])
        time.sleep(0.02)  # ‡∏£‡∏≠ 20ms
    
    # ‡πÉ‡∏ä‡πâ median ‡∏Ç‡∏≠‡∏á 5 ‡∏Ñ‡πà‡∏≤
    stable_value = statistics.median(stable_readings)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
    variance = max(stable_readings) - min(stable_readings)
    if variance > 100:  # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡∏ú‡∏±‡∏ô‡πÅ‡∏õ‡∏£‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 10cm
        print(f"‚ö†Ô∏è  ToF ‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£: variance={variance:.0f}mm, readings={stable_readings}")
    
    return stable_value

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πÅ‡∏Å‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏î‡πâ‡∏ß‡∏¢ Median Filter ---
def move_gimbal(ep_gimbal, ep_chassis):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πÅ‡∏Å‡∏ô 4 ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á + Median Filter + ‡∏õ‡∏£‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á
    """
    way = [0, 0, 0, 0] # [‡∏ã‡πâ‡∏≤‡∏¢, ‡∏´‡∏ô‡πâ‡∏≤, ‡∏Ç‡∏ß‡∏≤, ‡∏´‡∏•‡∏±‡∏á]

    print("üß≠ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πÅ‡∏Å‡∏ô...")
    correct_robot_orientation(ep_chassis, target_yaw=0)
    time.sleep(0.1)

    # ‡∏´‡∏±‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
    ep_gimbal.moveto(pitch=0, yaw=-90, pitch_speed=300, yaw_speed=300).wait_for_completed()
    time.sleep(0.1)  # **‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå stable**
    
    # **‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö stable**
    stable_distance = get_stable_distance_reading()
    print(f"‡∏´‡∏±‡∏ô‡∏ã‡πâ‡∏≤‡∏¢: raw={lastest_distance[0]:.0f}mm, stable={stable_distance:.0f}mm")
    
    if stable_distance < 200:
        way[0] = 0 #‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô
        adjust_distance = (170-stable_distance)/1000
        if adjust_distance > 0:  # **‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö**
            move_direction_pid_wall(ep_chassis, 'y+', adjust_distance)
            # correct_robot_orientation(ep_chassis, target_yaw=0)
    elif stable_distance < 600:
        way[0] = 0 #‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô
        adjust_distance = (stable_distance-170)/1000
        if adjust_distance > 0:  # **‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö**
            move_direction_pid_wall(ep_chassis, 'y-', adjust_distance)
            # correct_robot_orientation(ep_chassis, target_yaw=0)
    else:
        way[0] = 1 #‡∏ó‡∏≤‡∏á‡πÑ‡∏Å‡∏•

    # ‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    ep_gimbal.moveto(pitch=0, yaw=0, pitch_speed=100, yaw_speed=100).wait_for_completed()
    time.sleep(0.1)
    
    stable_distance = get_stable_distance_reading()
    print(f"‡∏´‡∏±‡∏ô‡∏Å‡∏•‡∏≤‡∏á: raw={lastest_distance[0]:.0f}mm, stable={stable_distance:.0f}mm")
    
    if stable_distance < 200:
        way[1] = 0 #‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô
        adjust_distance = (170-stable_distance)/1000
        if adjust_distance > 0:
            move_direction_pid_wall(ep_chassis, 'x-', adjust_distance)
            # correct_robot_orientation(ep_chassis, target_yaw=0)
    elif stable_distance < 600:
        way[1] = 0 #‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô
        adjust_distance = (stable_distance-170)/1000
        if adjust_distance > 0:
            move_direction_pid_wall(ep_chassis, 'x+', adjust_distance)
            # correct_robot_orientation(ep_chassis, target_yaw=0)
    else:
        way[1] = 1 #‡∏ó‡∏≤‡∏á‡πÑ‡∏Å‡∏•

    # ‡∏´‡∏±‡∏ô‡∏Ç‡∏ß‡∏≤
    ep_gimbal.moveto(pitch=0, yaw=90, pitch_speed=300, yaw_speed=300).wait_for_completed()
    time.sleep(0.1)
    
    stable_distance = get_stable_distance_reading()
    print(f"‡∏´‡∏±‡∏ô‡∏Ç‡∏ß‡∏≤: raw={lastest_distance[0]:.0f}mm, stable={stable_distance:.0f}mm")
    
    if stable_distance < 200:
        way[2] = 0 #‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô
        adjust_distance = (170-stable_distance)/1000
        if adjust_distance > 0:
            move_direction_pid_wall(ep_chassis, 'y-', adjust_distance)
            # correct_robot_orientation(ep_chassis, target_yaw=0)
    elif stable_distance < 600:
        way[2] = 0 #‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô
        adjust_distance = (stable_distance-170)/1000
        if adjust_distance > 0:
            move_direction_pid_wall(ep_chassis, 'y+', adjust_distance)
            # correct_robot_orientation(ep_chassis, target_yaw=0)
    else:
        way[2] = 1 #‡∏ó‡∏≤‡∏á‡πÑ‡∏Å‡∏•

    # ‡∏´‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á
    ep_gimbal.moveto(pitch=0, yaw=170, pitch_speed=300, yaw_speed=300).wait_for_completed()
    time.sleep(0.1)
    
    stable_distance = get_stable_distance_reading()
    print(f"‡∏´‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á: raw={lastest_distance[0]:.0f}mm, stable={stable_distance:.0f}mm")
    
    if stable_distance < 200:
        way[3] = 0 #‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô
        adjust_distance = (200-stable_distance)/1000
        if adjust_distance > 0:
            move_direction_pid_wall(ep_chassis, 'x+', adjust_distance)
            # correct_robot_orientation(ep_chassis, target_yaw=0)
    elif stable_distance < 600:
        way[3] = 0 #‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô
        adjust_distance = (stable_distance-200)/1000
        if adjust_distance > 0:
            move_direction_pid_wall(ep_chassis, 'x-', adjust_distance)
            # correct_robot_orientation(ep_chassis, target_yaw=0)
    else:
        way[3] = 1 #‡∏ó‡∏≤‡∏á‡πÑ‡∏Å‡∏•

    # ‡∏´‡∏±‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    ep_gimbal.moveto(pitch=0, yaw=0, pitch_speed=500, yaw_speed=500).wait_for_completed()
    time.sleep(0.1)
    
    print("üß≠ ‡∏õ‡∏£‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏™‡πÅ‡∏Å‡∏ô...")
    correct_robot_orientation(ep_chassis, target_yaw=0)
    
    print(f"üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏á: {way} [‡∏ã‡πâ‡∏≤‡∏¢, ‡∏´‡∏ô‡πâ‡∏≤, ‡∏Ç‡∏ß‡∏≤, ‡∏´‡∏•‡∏±‡∏á]")
    return way

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏î‡πâ‡∏ß‡∏¢ DFS ---
def explore_from(current_coords, ep_chassis, ep_gimbal):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô DFS ‡∏´‡∏•‡∏±‡∏Å ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö Recursive ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏à‡∏≤‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    """
    global visited_nodes, scan_memory

    # 1. ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏°‡∏≤‡πÄ‡∏¢‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    visited_nodes.add(current_coords)

    # 2. !! ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô
    if current_coords in scan_memory:
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏™‡πÅ‡∏Å‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
        available_ways = scan_memory[current_coords]
        print(f"\nüß† ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏µ‡πà {format_coords(current_coords)}, ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏Å‡πà‡∏≤: {available_ways}")
    else:
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•
        print(f"\nüìç ‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà: {format_coords(current_coords)}. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÅ‡∏Å‡∏ô...")
        
        # **‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï median filter buffer ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏´‡∏°‡πà**
        tof_readings.clear()
        time.sleep(0.1)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ buffer ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        
        available_ways = move_gimbal(ep_gimbal, ep_chassis)
        scan_memory[current_coords] = available_ways
        print(f"üî¨ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: {available_ways}")

    # 3. ‡∏ô‡∏¥‡∏¢‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏°‡∏∏‡∏°‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏•
    direction_map = [
        {'name': 'left',     'direction': 'y-', 'coords': (0, -STEP_SIZE), 'gimbal_yaw': -90},   # ‡∏ã‡πâ‡∏≤‡∏¢ = y-, ‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏• -90¬∞
        {'name': 'forward',  'direction': 'x+', 'coords': (STEP_SIZE, 0), 'gimbal_yaw': 0},     # ‡∏´‡∏ô‡πâ‡∏≤ = x+, ‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏• 0¬∞
        {'name': 'right',    'direction': 'y+', 'coords': (0, STEP_SIZE), 'gimbal_yaw': 90},    # ‡∏Ç‡∏ß‡∏≤ = y+, ‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏• 90¬∞
        {'name': 'backward', 'direction': 'x-', 'coords': (-STEP_SIZE, 0), 'gimbal_yaw': 170},  # ‡∏´‡∏•‡∏±‡∏á = x-, ‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏• 170¬∞
    ]
    
    # 4. ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏™‡∏≥‡∏£‡∏ß‡∏à‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å available_ways
    for i, direction_info in enumerate(direction_map):
        if available_ways[i] == 1:
            d_coords = direction_info['coords']
            next_coords = (round(current_coords[0] + d_coords[0], 2), round(current_coords[1] + d_coords[1], 2))

            if next_coords not in visited_nodes:
                print(f"  -> üë£ ‡∏™‡πÑ‡∏•‡∏î‡πå {direction_info['name']} ‡πÑ‡∏õ‡∏¢‡∏±‡∏á {format_coords(next_coords)}...")
                
                # **‡∏´‡∏±‡∏ô‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏•‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏î‡∏¥‡∏ô**
                gimbal_yaw = direction_info['gimbal_yaw']
                print(f"     üéØ ‡∏´‡∏±‡∏ô‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏•‡πÑ‡∏õ {gimbal_yaw}¬∞ ({direction_info['name']})")
                ep_gimbal.moveto(pitch=0, yaw=gimbal_yaw, pitch_speed=300, yaw_speed=300).wait_for_completed()
                time.sleep(0.1)
                
                # ‡πÉ‡∏ä‡πâ PID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏£‡∏ß‡∏à
                move_direction_pid(ep_chassis, direction_info['direction'], STEP_SIZE)

                explore_from(next_coords, ep_chassis, ep_gimbal)

                print(f"  <- ‚è™ ‡∏™‡πÑ‡∏•‡∏î‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å {format_coords(next_coords)} ‡∏°‡∏≤‡∏¢‡∏±‡∏á {format_coords(current_coords)}...")
                
                # **‡∏´‡∏±‡∏ô‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏•‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö**
                reverse_direction_map = {'x+': 'x-', 'x-': 'x+', 'y+': 'y-', 'y-': 'y+'}
                reverse_gimbal_map = {'x+': 170, 'x-': 0, 'y+': -90, 'y-': 90}  # ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
                
                reverse_direction = reverse_direction_map[direction_info['direction']]
                reverse_gimbal_yaw = reverse_gimbal_map[direction_info['direction']]
                
                print(f"     üîÑ ‡∏´‡∏±‡∏ô‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏•‡πÑ‡∏õ {reverse_gimbal_yaw}¬∞ (‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö)")
                ep_gimbal.moveto(pitch=0, yaw=reverse_gimbal_yaw, pitch_speed=300, yaw_speed=300).wait_for_completed()
                time.sleep(0.1)
                
                # ‡πÉ‡∏ä‡πâ PID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
                move_direction_pid(ep_chassis, reverse_direction, STEP_SIZE)
                
                # **‡∏´‡∏±‡∏ô‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à**
                print(f"     üè† ‡∏´‡∏±‡∏ô‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (0¬∞)")
                ep_gimbal.moveto(pitch=0, yaw=0, pitch_speed=300, yaw_speed=300).wait_for_completed()
                time.sleep(0.1)
                
            else:
                print(f"  -- ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á {direction_info['name']} ‡πÑ‡∏õ‡∏¢‡∏±‡∏á {format_coords(next_coords)} ‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ...")
    
    print(f"‚úÖ ‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏à‡∏≤‡∏Å {format_coords(current_coords)} ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÅ‡∏Ç‡∏ô‡∏á‡πÅ‡∏•‡πâ‡∏ß")


if __name__ == '__main__':
    ep_robot = robot.Robot()
    ep_robot.initialize(conn_type="ap")

    ep_gimbal = ep_robot.gimbal
    ep_sensor = ep_robot.sensor
    ep_chassis = ep_robot.chassis

    print("===== ü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏ß‡∏à‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ DFS + PID Movement + ToF Median Filter =====")
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° subscription ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PID ‡πÅ‡∏•‡∏∞ attitude
    ep_sensor.sub_distance(freq=50, callback=sub_data_distance)  # **ToF ‡∏Å‡∏±‡∏ö median filter**
    ep_chassis.sub_position(freq=50, callback=sub_chassis_position)
    ep_chassis.sub_attitude(freq=20, callback=sub_chassis_attitude)
    time.sleep(0.5)  # **‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡πÉ‡∏´‡πâ median filter buffer ‡πÄ‡∏ï‡∏¥‡∏°**

    print(f"üîß Median Filter ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß (buffer size: {tof_readings.maxlen})")

    try:
        start_node = (0.0, 0.0)
        explore_from(start_node, ep_chassis, ep_gimbal)
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    finally:
        print("\n===== ‚èπÔ∏è ‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏ß‡∏à‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö =====")
        ep_sensor.unsub_distance()
        ep_chassis.unsub_position()
        ep_chassis.unsub_attitude()
        time.sleep(1)
        ep_robot.close()